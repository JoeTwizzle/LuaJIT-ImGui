--script for imgui.lua generation

---------------args
local args = {...}
local ADD_TYPEDEF = args[1] == "true"
local locations = {}
for i=2,#args do table.insert(locations,args[i]) end
-------------------------------------------------------------
function strip(cad)
	return cad:gsub("^%s*(.-)%s*$","%1")
end

--iterates lines from a gcc -E in a specific location
local function location(file,locpathT)
	local location_re = '^# %d+ "([^"]*)"'
	local path_reT = {}
	for i,locpath in ipairs(locpathT) do
		table.insert(path_reT,'^(.*[\\/])('..locpath..')%.h$')
	end
	local in_location = false
	local function location_it()
		repeat
			local line = file:read"*l"
			if not line then return nil end
			if line:sub(1,1) == "#" then
				-- Is this a location pragma?
				local location_match = line:match(location_re)
				if location_match then
					in_location = false
					for i,path_re in ipairs(path_reT) do
						if location_match:match(path_re) then in_location = true; break end
					end
				end
			elseif in_location then
				return line
			end
		until false
	end
	return location_it
end

local struct_re = "^%s*struct%s+([^%s;]+);$"

local cdefs = {}
for line in location(io.input(),locations) do
	line = line:gsub("extern __attribute__%(%(dllexport%)%)","")
	table.insert(cdefs,line)
	local stname = line:match(struct_re)
	if ADD_TYPEDEF and stname then table.insert(cdefs,"typedef struct "..stname.." "..stname..";\n") end
end

-- Output the file
	print("--[[ BEGIN AUTOGENERATED SEGMENT ]]")
	print("local cdecl = cdecl or ''")
	print("cdecl = cdecl..[[")
	for i,line in ipairs(cdefs) do
		io.write( line,"\n") 
	end
	print("]]")

	print("--[[ END AUTOGENERATED SEGMENT ]]")
