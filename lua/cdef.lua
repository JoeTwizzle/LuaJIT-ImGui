--script for imgui.lua generation
local args = {...}
local locations = {}
for _,str in ipairs(args) do table.insert(locations,str) end

function strip(cad)
	return cad:gsub("^%s*(.-)%s*$","%1")
end

--iterates lines from a gcc -E in a specific location
local function location(file,locpathT)
	local location_re = '^# %d+ "([^"]*)"'
	local path_reT = {}
	for i,locpath in ipairs(locpathT) do
		table.insert(path_reT,'^(.*[\\/])('..locpath..')%.h$')
	end
	local in_location = false
	local function location_it()
		repeat
			local line = file:read"*l"
			if not line then return nil end
			if line:sub(1,1) == "#" then
				-- Is this a location pragma?
				local location_match = line:match(location_re)
				if location_match then
					in_location = false
					for i,path_re in ipairs(path_reT) do
						if location_match:match(path_re) then in_location = true; break end
					end
				end
			elseif in_location then
				return line
			end
		until false
	end
	return location_it
end

local cdefs = {}
for line in location(io.input(),locations) do
	line = line:gsub("extern __attribute__%(%(dllexport%)%)","")
	table.insert(cdefs,line)
end


--[=[
location_re = '^# %d+ "([^"]*)"'
cimpath_re = '^(.*[\\/])(cimgui)%.h$' 
cimpath2_re = '^(.*[\\/])(imgui_structs)%.h$'
cimpath3_re = '^(.*[\\/])(auto_funcs)%.h$'  
define_re = "^#define%s+([^%s]+)%s+([^%s]+)$"

number_re = "^-?[0-9]+$"
hex_re = "0x[0-9a-fA-F]+$"

local in_cimgui = false
for line in io.lines() do
repeat -- simulate continue with break

	--print(line)
	line = strip(line)
	if #line == 0 then break end
	-- Is this a preprocessor statement?
	if line:sub(1,1) == "#" then
		-- Is this a location pragma?
		local location_match = line:match(location_re)
		if location_match then
			--print("location_match",line)
			-- If we are transitioning to a header we need to parse, set the flag
			local cimpath_match,aaa = location_match:match(cimpath_re)
			local cimpath_match2,aaa = location_match:match(cimpath2_re)
			local cimpath_match3,aaa = location_match:match(cimpath3_re)
			in_cimgui = (cimpath_match ~= nil) or (cimpath_match2 ~= nil) or (cimpath_match3 ~= nil)
			break
		end
		
	
	elseif in_cimgui then
	--[[
		-- Windows likes to add __stdcall__ to everything, but it isn't needed and is actually harmful when using under linux.
		-- However, it is needed for callbacks in windows.
		--if line:find("typedef") >= 0  and line.find(" PFNGL") < 0:
		if line:find("typedef") and not line:find(" PFNGL") then
			--line = line:gsub("__attribute__%(%(__stdcall__%)%) ", 'WINDOWS_STDCALL ')
			line = line:gsub('GL_APIENTRY ' , 'WINDOWS_STDCALL ')
		else
			--line = line:gsub("__attribute__%(%(__stdcall__%)%) ", '')
			line = line:gsub('GL_APIENTRY ', '')
		end
		-- While linux likes to add __attribute__((visibility("default"))) 
		line = line:gsub('__attribute__%(%(visibility%("default"%)%)%) ', '')
		line = line:gsub("__attribute__%(%(__stdcall__%)%) ", '')
		--]]
		line = line:gsub("extern __attribute__%(%(dllexport%)%)","")
		table.insert(cdefs,line)
	end

until true
end
--]=]
-- Output the file
	print("--[[ BEGIN AUTOGENERATED SEGMENT ]]")
	print("local cdecl = [[")
	for i,line in ipairs(cdefs) do
		io.write( line,"\n") 
	end
	print("]]")

	print("--[[ END AUTOGENERATED SEGMENT ]]")
