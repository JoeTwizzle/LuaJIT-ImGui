--[[ BEGIN AUTOGENERATED SEGMENT ]]
local cdecl = [[
	typedef unsigned long long ImU64;
	struct ImDrawChannel;
	typedef struct ImDrawChannel ImDrawChannel;
	struct ImDrawCmd;
	typedef struct ImDrawCmd ImDrawCmd;
	struct ImDrawData;
	typedef struct ImDrawData ImDrawData;
	struct ImDrawList;
	typedef struct ImDrawList ImDrawList;
	struct ImDrawListSharedData;
	typedef struct ImDrawListSharedData ImDrawListSharedData;
	struct ImDrawVert;
	typedef struct ImDrawVert ImDrawVert;
	struct ImFont;
	typedef struct ImFont ImFont;
	struct ImFontAtlas;
	typedef struct ImFontAtlas ImFontAtlas;
	struct ImFontConfig;
	typedef struct ImFontConfig ImFontConfig;
	struct ImColor;
	typedef struct ImColor ImColor;
	struct ImGuiIO;
	typedef struct ImGuiIO ImGuiIO;
	struct ImGuiOnceUponAFrame;
	typedef struct ImGuiOnceUponAFrame ImGuiOnceUponAFrame;
	struct ImGuiStorage;
	typedef struct ImGuiStorage ImGuiStorage;
	struct ImGuiStyle;
	typedef struct ImGuiStyle ImGuiStyle;
	struct ImGuiTextFilter;
	typedef struct ImGuiTextFilter ImGuiTextFilter;
	struct ImGuiTextBuffer;
	typedef struct ImGuiTextBuffer ImGuiTextBuffer;
	struct ImGuiTextEditCallbackData;
	typedef struct ImGuiTextEditCallbackData ImGuiTextEditCallbackData;
	struct ImGuiSizeCallbackData;
	typedef struct ImGuiSizeCallbackData ImGuiSizeCallbackData;
	struct ImGuiListClipper;
	typedef struct ImGuiListClipper ImGuiListClipper;
	struct ImGuiPayload;
	typedef struct ImGuiPayload ImGuiPayload;
	struct ImGuiContext;
	typedef struct ImGuiContext ImGuiContext;
	typedef void* ImTextureID;
	typedef unsigned int ImU32;
	typedef unsigned int ImGuiID;
	typedef unsigned short ImWchar;
	typedef int ImGuiCol;
	typedef int ImGuiDir;
	typedef int ImGuiCond;
	typedef int ImGuiKey;
	typedef int ImGuiNavInput;
	typedef int ImGuiMouseCursor;
	typedef int ImGuiStyleVar;
	typedef int ImDrawCornerFlags;
	typedef int ImDrawListFlags;
	typedef int ImFontAtlasFlags;
	typedef int ImGuiBackendFlags;
	typedef int ImGuiColorEditFlags;
	typedef int ImGuiColumnsFlags;
	typedef int ImGuiConfigFlags;
	typedef int ImGuiDragDropFlags;
	typedef int ImGuiComboFlags;
	typedef int ImGuiFocusedFlags;
	typedef int ImGuiHoveredFlags;
	typedef int ImGuiInputTextFlags;
	typedef int ImGuiSelectableFlags;
	typedef int ImGuiTreeNodeFlags;
	typedef int ImGuiWindowFlags;
	typedef int (*ImGuiTextEditCallback)(ImGuiTextEditCallbackData *data);
	typedef void (*ImGuiSizeCallback)(ImGuiSizeCallbackData* data);
	typedef unsigned long long ImU64;
	struct ImVec2
	{
	float x, y;
	};
	typedef struct ImVec2 ImVec2;
	struct ImVec4
	{
	float x, y, z, w;
	};
	typedef struct ImVec4 ImVec4;
	enum ImGuiWindowFlags_
	{
	ImGuiWindowFlags_NoTitleBar = 1 << 0,
	ImGuiWindowFlags_NoResize = 1 << 1,
	ImGuiWindowFlags_NoMove = 1 << 2,
	ImGuiWindowFlags_NoScrollbar = 1 << 3,
	ImGuiWindowFlags_NoScrollWithMouse = 1 << 4,
	ImGuiWindowFlags_NoCollapse = 1 << 5,
	ImGuiWindowFlags_AlwaysAutoResize = 1 << 6,
	ImGuiWindowFlags_NoSavedSettings = 1 << 8,
	ImGuiWindowFlags_NoInputs = 1 << 9,
	ImGuiWindowFlags_MenuBar = 1 << 10,
	ImGuiWindowFlags_HorizontalScrollbar = 1 << 11,
	ImGuiWindowFlags_NoFocusOnAppearing = 1 << 12,
	ImGuiWindowFlags_NoBringToFrontOnFocus = 1 << 13,
	ImGuiWindowFlags_AlwaysVerticalScrollbar= 1 << 14,
	ImGuiWindowFlags_AlwaysHorizontalScrollbar=1<< 15,
	ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,
	ImGuiWindowFlags_ResizeFromAnySide = 1 << 17,
	ImGuiWindowFlags_NoNavInputs = 1 << 18,
	ImGuiWindowFlags_NoNavFocus = 1 << 19,
	ImGuiWindowFlags_NoNav = ImGuiWindowFlags_NoNavInputs | ImGuiWindowFlags_NoNavFocus,
	ImGuiWindowFlags_NavFlattened = 1 << 23,
	ImGuiWindowFlags_ChildWindow = 1 << 24,
	ImGuiWindowFlags_Tooltip = 1 << 25,
	ImGuiWindowFlags_Popup = 1 << 26,
	ImGuiWindowFlags_Modal = 1 << 27,
	ImGuiWindowFlags_ChildMenu = 1 << 28
	};
	enum ImGuiInputTextFlags_
	{
	ImGuiInputTextFlags_CharsDecimal = 1 << 0,
	ImGuiInputTextFlags_CharsHexadecimal = 1 << 1,
	ImGuiInputTextFlags_CharsUppercase = 1 << 2,
	ImGuiInputTextFlags_CharsNoBlank = 1 << 3,
	ImGuiInputTextFlags_AutoSelectAll = 1 << 4,
	ImGuiInputTextFlags_EnterReturnsTrue = 1 << 5,
	ImGuiInputTextFlags_CallbackCompletion = 1 << 6,
	ImGuiInputTextFlags_CallbackHistory = 1 << 7,
	ImGuiInputTextFlags_CallbackAlways = 1 << 8,
	ImGuiInputTextFlags_CallbackCharFilter = 1 << 9,
	ImGuiInputTextFlags_AllowTabInput = 1 << 10,
	ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,
	ImGuiInputTextFlags_NoHorizontalScroll = 1 << 12,
	ImGuiInputTextFlags_AlwaysInsertMode = 1 << 13,
	ImGuiInputTextFlags_ReadOnly = 1 << 14,
	ImGuiInputTextFlags_Password = 1 << 15,
	ImGuiInputTextFlags_NoUndoRedo = 1 << 16,
	ImGuiInputTextFlags_CharsScientific = 1 << 17,
	ImGuiInputTextFlags_Multiline = 1 << 20
	};
	enum ImGuiTreeNodeFlags_
	{
	ImGuiTreeNodeFlags_Selected = 1 << 0,
	ImGuiTreeNodeFlags_Framed = 1 << 1,
	ImGuiTreeNodeFlags_AllowItemOverlap = 1 << 2,
	ImGuiTreeNodeFlags_NoTreePushOnOpen = 1 << 3,
	ImGuiTreeNodeFlags_NoAutoOpenOnLog = 1 << 4,
	ImGuiTreeNodeFlags_DefaultOpen = 1 << 5,
	ImGuiTreeNodeFlags_OpenOnDoubleClick = 1 << 6,
	ImGuiTreeNodeFlags_OpenOnArrow = 1 << 7,
	ImGuiTreeNodeFlags_Leaf = 1 << 8,
	ImGuiTreeNodeFlags_Bullet = 1 << 9,
	ImGuiTreeNodeFlags_FramePadding = 1 << 10,
	ImGuiTreeNodeFlags_NavLeftJumpsBackHere = 1 << 13,
	ImGuiTreeNodeFlags_CollapsingHeader = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoAutoOpenOnLog
	, ImGuiTreeNodeFlags_AllowOverlapMode = ImGuiTreeNodeFlags_AllowItemOverlap
	};
	enum ImGuiSelectableFlags_
	{
	ImGuiSelectableFlags_DontClosePopups = 1 << 0,
	ImGuiSelectableFlags_SpanAllColumns = 1 << 1,
	ImGuiSelectableFlags_AllowDoubleClick = 1 << 2
	};
	enum ImGuiComboFlags_
	{
	ImGuiComboFlags_PopupAlignLeft = 1 << 0,
	ImGuiComboFlags_HeightSmall = 1 << 1,
	ImGuiComboFlags_HeightRegular = 1 << 2,
	ImGuiComboFlags_HeightLarge = 1 << 3,
	ImGuiComboFlags_HeightLargest = 1 << 4,
	ImGuiComboFlags_NoArrowButton = 1 << 5,
	ImGuiComboFlags_NoPreview = 1 << 6,
	ImGuiComboFlags_HeightMask_ = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest
	};
	enum ImGuiFocusedFlags_
	{
	ImGuiFocusedFlags_ChildWindows = 1 << 0,
	ImGuiFocusedFlags_RootWindow = 1 << 1,
	ImGuiFocusedFlags_AnyWindow = 1 << 2,
	ImGuiFocusedFlags_RootAndChildWindows = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows
	};
	enum ImGuiHoveredFlags_
	{
	ImGuiHoveredFlags_Default = 0,
	ImGuiHoveredFlags_ChildWindows = 1 << 0,
	ImGuiHoveredFlags_RootWindow = 1 << 1,
	ImGuiHoveredFlags_AnyWindow = 1 << 2,
	ImGuiHoveredFlags_AllowWhenBlockedByPopup = 1 << 3,
	ImGuiHoveredFlags_AllowWhenBlockedByActiveItem = 1 << 5,
	ImGuiHoveredFlags_AllowWhenOverlapped = 1 << 6,
	ImGuiHoveredFlags_RectOnly = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped,
	ImGuiHoveredFlags_RootAndChildWindows = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows
	};
	enum ImGuiDragDropFlags_
	{
	ImGuiDragDropFlags_SourceNoPreviewTooltip = 1 << 0,
	ImGuiDragDropFlags_SourceNoDisableHover = 1 << 1,
	ImGuiDragDropFlags_SourceNoHoldToOpenOthers = 1 << 2,
	ImGuiDragDropFlags_SourceAllowNullID = 1 << 3,
	ImGuiDragDropFlags_SourceExtern = 1 << 4,
	ImGuiDragDropFlags_AcceptBeforeDelivery = 1 << 10,
	ImGuiDragDropFlags_AcceptNoDrawDefaultRect = 1 << 11,
	ImGuiDragDropFlags_AcceptPeekOnly = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect
	};
	enum ImGuiDir_
	{
	ImGuiDir_None = -1,
	ImGuiDir_Left = 0,
	ImGuiDir_Right = 1,
	ImGuiDir_Up = 2,
	ImGuiDir_Down = 3,
	ImGuiDir_COUNT
	};
	enum ImGuiKey_
	{
	ImGuiKey_Tab,
	ImGuiKey_LeftArrow,
	ImGuiKey_RightArrow,
	ImGuiKey_UpArrow,
	ImGuiKey_DownArrow,
	ImGuiKey_PageUp,
	ImGuiKey_PageDown,
	ImGuiKey_Home,
	ImGuiKey_End,
	ImGuiKey_Insert,
	ImGuiKey_Delete,
	ImGuiKey_Backspace,
	ImGuiKey_Space,
	ImGuiKey_Enter,
	ImGuiKey_Escape,
	ImGuiKey_A,
	ImGuiKey_C,
	ImGuiKey_V,
	ImGuiKey_X,
	ImGuiKey_Y,
	ImGuiKey_Z,
	ImGuiKey_COUNT
	};
	enum ImGuiNavInput_
	{
	ImGuiNavInput_Activate,
	ImGuiNavInput_Cancel,
	ImGuiNavInput_Input,
	ImGuiNavInput_Menu,
	ImGuiNavInput_DpadLeft,
	ImGuiNavInput_DpadRight,
	ImGuiNavInput_DpadUp,
	ImGuiNavInput_DpadDown,
	ImGuiNavInput_LStickLeft,
	ImGuiNavInput_LStickRight,
	ImGuiNavInput_LStickUp,
	ImGuiNavInput_LStickDown,
	ImGuiNavInput_FocusPrev,
	ImGuiNavInput_FocusNext,
	ImGuiNavInput_TweakSlow,
	ImGuiNavInput_TweakFast,
	ImGuiNavInput_KeyMenu_,
	ImGuiNavInput_KeyLeft_,
	ImGuiNavInput_KeyRight_,
	ImGuiNavInput_KeyUp_,
	ImGuiNavInput_KeyDown_,
	ImGuiNavInput_COUNT,
	ImGuiNavInput_InternalStart_ = ImGuiNavInput_KeyMenu_
	};
	enum ImGuiConfigFlags_
	{
	ImGuiConfigFlags_NavEnableKeyboard = 1 << 0,
	ImGuiConfigFlags_NavEnableGamepad = 1 << 1,
	ImGuiConfigFlags_NavEnableSetMousePos = 1 << 2,
	ImGuiConfigFlags_NavNoCaptureKeyboard = 1 << 3,
	ImGuiConfigFlags_NoMouse = 1 << 4,
	ImGuiConfigFlags_NoMouseCursorChange = 1 << 5,
	ImGuiConfigFlags_IsSRGB = 1 << 20,
	ImGuiConfigFlags_IsTouchScreen = 1 << 21
	};
	enum ImGuiBackendFlags_
	{
	ImGuiBackendFlags_HasGamepad = 1 << 0,
	ImGuiBackendFlags_HasMouseCursors = 1 << 1,
	ImGuiBackendFlags_HasSetMousePos = 1 << 2
	};
	enum ImGuiCol_
	{
	ImGuiCol_Text,
	ImGuiCol_TextDisabled,
	ImGuiCol_WindowBg,
	ImGuiCol_ChildBg,
	ImGuiCol_PopupBg,
	ImGuiCol_Border,
	ImGuiCol_BorderShadow,
	ImGuiCol_FrameBg,
	ImGuiCol_FrameBgHovered,
	ImGuiCol_FrameBgActive,
	ImGuiCol_TitleBg,
	ImGuiCol_TitleBgActive,
	ImGuiCol_TitleBgCollapsed,
	ImGuiCol_MenuBarBg,
	ImGuiCol_ScrollbarBg,
	ImGuiCol_ScrollbarGrab,
	ImGuiCol_ScrollbarGrabHovered,
	ImGuiCol_ScrollbarGrabActive,
	ImGuiCol_CheckMark,
	ImGuiCol_SliderGrab,
	ImGuiCol_SliderGrabActive,
	ImGuiCol_Button,
	ImGuiCol_ButtonHovered,
	ImGuiCol_ButtonActive,
	ImGuiCol_Header,
	ImGuiCol_HeaderHovered,
	ImGuiCol_HeaderActive,
	ImGuiCol_Separator,
	ImGuiCol_SeparatorHovered,
	ImGuiCol_SeparatorActive,
	ImGuiCol_ResizeGrip,
	ImGuiCol_ResizeGripHovered,
	ImGuiCol_ResizeGripActive,
	ImGuiCol_PlotLines,
	ImGuiCol_PlotLinesHovered,
	ImGuiCol_PlotHistogram,
	ImGuiCol_PlotHistogramHovered,
	ImGuiCol_TextSelectedBg,
	ImGuiCol_ModalWindowDarkening,
	ImGuiCol_DragDropTarget,
	ImGuiCol_NavHighlight,
	ImGuiCol_NavWindowingHighlight,
	ImGuiCol_COUNT
	, ImGuiCol_ChildWindowBg = ImGuiCol_ChildBg, ImGuiCol_Column = ImGuiCol_Separator, ImGuiCol_ColumnHovered = ImGuiCol_SeparatorHovered, ImGuiCol_ColumnActive = ImGuiCol_SeparatorActive
	};
	enum ImGuiStyleVar_
	{
	ImGuiStyleVar_Alpha,
	ImGuiStyleVar_WindowPadding,
	ImGuiStyleVar_WindowRounding,
	ImGuiStyleVar_WindowBorderSize,
	ImGuiStyleVar_WindowMinSize,
	ImGuiStyleVar_WindowTitleAlign,
	ImGuiStyleVar_ChildRounding,
	ImGuiStyleVar_ChildBorderSize,
	ImGuiStyleVar_PopupRounding,
	ImGuiStyleVar_PopupBorderSize,
	ImGuiStyleVar_FramePadding,
	ImGuiStyleVar_FrameRounding,
	ImGuiStyleVar_FrameBorderSize,
	ImGuiStyleVar_ItemSpacing,
	ImGuiStyleVar_ItemInnerSpacing,
	ImGuiStyleVar_IndentSpacing,
	ImGuiStyleVar_ScrollbarSize,
	ImGuiStyleVar_ScrollbarRounding,
	ImGuiStyleVar_GrabMinSize,
	ImGuiStyleVar_GrabRounding,
	ImGuiStyleVar_ButtonTextAlign,
	ImGuiStyleVar_COUNT
	, ImGuiStyleVar_Count_ = ImGuiStyleVar_COUNT, ImGuiStyleVar_ChildWindowRounding = ImGuiStyleVar_ChildRounding
	};
	enum ImGuiColorEditFlags_
	{
	ImGuiColorEditFlags_NoAlpha = 1 << 1,
	ImGuiColorEditFlags_NoPicker = 1 << 2,
	ImGuiColorEditFlags_NoOptions = 1 << 3,
	ImGuiColorEditFlags_NoSmallPreview = 1 << 4,
	ImGuiColorEditFlags_NoInputs = 1 << 5,
	ImGuiColorEditFlags_NoTooltip = 1 << 6,
	ImGuiColorEditFlags_NoLabel = 1 << 7,
	ImGuiColorEditFlags_NoSidePreview = 1 << 8,
	ImGuiColorEditFlags_AlphaBar = 1 << 9,
	ImGuiColorEditFlags_AlphaPreview = 1 << 10,
	ImGuiColorEditFlags_AlphaPreviewHalf= 1 << 11,
	ImGuiColorEditFlags_HDR = 1 << 12,
	ImGuiColorEditFlags_RGB = 1 << 13,
	ImGuiColorEditFlags_HSV = 1 << 14,
	ImGuiColorEditFlags_HEX = 1 << 15,
	ImGuiColorEditFlags_Uint8 = 1 << 16,
	ImGuiColorEditFlags_Float = 1 << 17,
	ImGuiColorEditFlags_PickerHueBar = 1 << 18,
	ImGuiColorEditFlags_PickerHueWheel = 1 << 19,
	ImGuiColorEditFlags__InputsMask = ImGuiColorEditFlags_RGB|ImGuiColorEditFlags_HSV|ImGuiColorEditFlags_HEX,
	ImGuiColorEditFlags__DataTypeMask = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_Float,
	ImGuiColorEditFlags__PickerMask = ImGuiColorEditFlags_PickerHueWheel|ImGuiColorEditFlags_PickerHueBar,
	ImGuiColorEditFlags__OptionsDefault = ImGuiColorEditFlags_Uint8|ImGuiColorEditFlags_RGB|ImGuiColorEditFlags_PickerHueBar
	};
	enum ImGuiMouseCursor_
	{
	ImGuiMouseCursor_None = -1,
	ImGuiMouseCursor_Arrow = 0,
	ImGuiMouseCursor_TextInput,
	ImGuiMouseCursor_ResizeAll,
	ImGuiMouseCursor_ResizeNS,
	ImGuiMouseCursor_ResizeEW,
	ImGuiMouseCursor_ResizeNESW,
	ImGuiMouseCursor_ResizeNWSE,
	ImGuiMouseCursor_COUNT
	, ImGuiMouseCursor_Count_ = ImGuiMouseCursor_COUNT
	};
	enum ImGuiCond_
	{
	ImGuiCond_Always = 1 << 0,
	ImGuiCond_Once = 1 << 1,
	ImGuiCond_FirstUseEver = 1 << 2,
	ImGuiCond_Appearing = 1 << 3
	, ImGuiSetCond_Always = ImGuiCond_Always, ImGuiSetCond_Once = ImGuiCond_Once, ImGuiSetCond_FirstUseEver = ImGuiCond_FirstUseEver, ImGuiSetCond_Appearing = ImGuiCond_Appearing
	};
	struct ImGuiStyle
	{
	float Alpha;
	ImVec2 WindowPadding;
	float WindowRounding;
	float WindowBorderSize;
	ImVec2 WindowMinSize;
	ImVec2 WindowTitleAlign;
	float ChildRounding;
	float ChildBorderSize;
	float PopupRounding;
	float PopupBorderSize;
	ImVec2 FramePadding;
	float FrameRounding;
	float FrameBorderSize;
	ImVec2 ItemSpacing;
	ImVec2 ItemInnerSpacing;
	ImVec2 TouchExtraPadding;
	float IndentSpacing;
	float ColumnsMinSpacing;
	float ScrollbarSize;
	float ScrollbarRounding;
	float GrabMinSize;
	float GrabRounding;
	ImVec2 ButtonTextAlign;
	ImVec2 DisplayWindowPadding;
	ImVec2 DisplaySafeAreaPadding;
	float MouseCursorScale;
	_Bool AntiAliasedLines;
	_Bool AntiAliasedFill;
	float CurveTessellationTol;
	ImVec4 Colors[ImGuiCol_COUNT];
	};
	typedef struct ImGuiStyle ImGuiStyle;
	struct ImGuiIO
	{
	ImGuiConfigFlags ConfigFlags;
	ImGuiBackendFlags BackendFlags;
	ImVec2 DisplaySize;
	float DeltaTime;
	float IniSavingRate;
	const char* IniFilename;
	const char* LogFilename;
	float MouseDoubleClickTime;
	float MouseDoubleClickMaxDist;
	float MouseDragThreshold;
	int KeyMap[ImGuiKey_COUNT];
	float KeyRepeatDelay;
	float KeyRepeatRate;
	void* UserData;
	ImFontAtlas* Fonts;
	float FontGlobalScale;
	_Bool FontAllowUserScaling;
	ImFont* FontDefault;
	ImVec2 DisplayFramebufferScale;
	ImVec2 DisplayVisibleMin;
	ImVec2 DisplayVisibleMax;
	_Bool OptMacOSXBehaviors;
	_Bool OptCursorBlink;
	const char* (*GetClipboardTextFn)(void* user_data);
	void (*SetClipboardTextFn)(void* user_data, const char* text);
	void* ClipboardUserData;
	void (*ImeSetInputScreenPosFn)(int x, int y);
	void* ImeWindowHandle;
	void (*RenderDrawListsFn)(ImDrawData* data);
	ImVec2 MousePos;
	_Bool MouseDown[5];
	float MouseWheel;
	float MouseWheelH;
	_Bool MouseDrawCursor;
	_Bool KeyCtrl;
	_Bool KeyShift;
	_Bool KeyAlt;
	_Bool KeySuper;
	_Bool KeysDown[512];
	ImWchar InputCharacters[16+1];
	float NavInputs[ImGuiNavInput_COUNT];
	_Bool WantCaptureMouse;
	_Bool WantCaptureKeyboard;
	_Bool WantTextInput;
	_Bool WantSetMousePos;
	_Bool NavActive;
	_Bool NavVisible;
	float Framerate;
	int MetricsRenderVertices;
	int MetricsRenderIndices;
	int MetricsActiveWindows;
	ImVec2 MouseDelta;
	ImVec2 MousePosPrev;
	ImVec2 MouseClickedPos[5];
	float MouseClickedTime[5];
	_Bool MouseClicked[5];
	_Bool MouseDoubleClicked[5];
	_Bool MouseReleased[5];
	_Bool MouseDownOwned[5];
	float MouseDownDuration[5];
	float MouseDownDurationPrev[5];
	ImVec2 MouseDragMaxDistanceAbs[5];
	float MouseDragMaxDistanceSqr[5];
	float KeysDownDuration[512];
	float KeysDownDurationPrev[512];
	float NavInputsDownDuration[ImGuiNavInput_COUNT];
	float NavInputsDownDurationPrev[ImGuiNavInput_COUNT];
	};
	typedef struct ImGuiIO ImGuiIO;
	struct ImVector
	{
	int Size;
	int Capacity;
	void* Data;
	};
	typedef struct ImVector ImVector;struct ImNewDummy {};
	struct ImGuiOnceUponAFrame
	{
	int RefFrame;
	};
	typedef struct ImGuiOnceUponAFrame ImGuiOnceUponAFrame;
	struct ImGuiTextFilter
	{
	char InputBuf[256];
	ImVector Filters;
	int CountGrep;
	};
	typedef struct ImGuiTextFilter ImGuiTextFilter;
	struct ImGuiTextBuffer
	{
	ImVector Buf;
	};
	typedef struct ImGuiTextBuffer ImGuiTextBuffer;
	struct ImGuiStorage
	{
	ImVector Data;
	};
	typedef struct ImGuiStorage ImGuiStorage;
	struct ImGuiTextEditCallbackData
	{
	ImGuiInputTextFlags EventFlag;
	ImGuiInputTextFlags Flags;
	void* UserData;
	_Bool ReadOnly;
	ImWchar EventChar;
	ImGuiKey EventKey;
	char* Buf;
	int BufTextLen;
	int BufSize;
	_Bool BufDirty;
	int CursorPos;
	int SelectionStart;
	int SelectionEnd;
	};
	typedef struct ImGuiTextEditCallbackData ImGuiTextEditCallbackData;
	struct ImGuiSizeCallbackData
	{
	void* UserData;
	ImVec2 Pos;
	ImVec2 CurrentSize;
	ImVec2 DesiredSize;
	};
	typedef struct ImGuiSizeCallbackData ImGuiSizeCallbackData;
	struct ImGuiPayload
	{
	const void* Data;
	int DataSize;
	ImGuiID SourceId;
	ImGuiID SourceParentId;
	int DataFrameCount;
	char DataType[32+1];
	_Bool Preview;
	_Bool Delivery;
	};
	typedef struct ImGuiPayload ImGuiPayload;
	struct ImColor
	{
	ImVec4 Value;
	};
	typedef struct ImColor ImColor;
	struct ImGuiListClipper
	{
	float StartPosY;
	float ItemsHeight;
	int ItemsCount, StepNo, DisplayStart, DisplayEnd;
	};
	typedef struct ImGuiListClipper ImGuiListClipper;
	typedef void (*ImDrawCallback)(const ImDrawList* parent_list, const ImDrawCmd* cmd);
	struct ImDrawCmd
	{
	unsigned int ElemCount;
	ImVec4 ClipRect;
	ImTextureID TextureId;
	ImDrawCallback UserCallback;
	void* UserCallbackData;
	};
	typedef struct ImDrawCmd ImDrawCmd;
	typedef unsigned short ImDrawIdx;
	struct ImDrawVert
	{
	ImVec2 pos;
	ImVec2 uv;
	ImU32 col;
	};
	typedef struct ImDrawVert ImDrawVert;
	struct ImDrawChannel
	{
	ImVector CmdBuffer;
	ImVector IdxBuffer;
	};
	typedef struct ImDrawChannel ImDrawChannel;
	enum ImDrawCornerFlags_
	{
	ImDrawCornerFlags_TopLeft = 1 << 0,
	ImDrawCornerFlags_TopRight = 1 << 1,
	ImDrawCornerFlags_BotLeft = 1 << 2,
	ImDrawCornerFlags_BotRight = 1 << 3,
	ImDrawCornerFlags_Top = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,
	ImDrawCornerFlags_Bot = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,
	ImDrawCornerFlags_Left = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,
	ImDrawCornerFlags_Right = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight,
	ImDrawCornerFlags_All = 0xF
	};
	enum ImDrawListFlags_
	{
	ImDrawListFlags_AntiAliasedLines = 1 << 0,
	ImDrawListFlags_AntiAliasedFill = 1 << 1
	};
	struct ImDrawList
	{
	ImVector CmdBuffer;
	ImVector IdxBuffer;
	ImVector VtxBuffer;
	ImDrawListFlags Flags;
	const ImDrawListSharedData* _Data;
	const char* _OwnerName;
	unsigned int _VtxCurrentIdx;
	ImDrawVert* _VtxWritePtr;
	ImDrawIdx* _IdxWritePtr;
	ImVector _ClipRectStack;
	ImVector _TextureIdStack;
	ImVector _Path;
	int _ChannelsCurrent;
	int _ChannelsCount;
	ImVector _Channels;
	};
	typedef struct ImDrawList ImDrawList;
	struct ImDrawData
	{
	_Bool Valid;
	ImDrawList** CmdLists;
	int CmdListsCount;
	int TotalIdxCount;
	int TotalVtxCount;
	};
	typedef struct ImDrawData ImDrawData;
	struct ImFontConfig
	{
	void* FontData;
	int FontDataSize;
	_Bool FontDataOwnedByAtlas;
	int FontNo;
	float SizePixels;
	int OversampleH;
	int OversampleV;
	_Bool PixelSnapH;
	ImVec2 GlyphExtraSpacing;
	ImVec2 GlyphOffset;
	const ImWchar* GlyphRanges;
	_Bool MergeMode;
	unsigned int RasterizerFlags;
	float RasterizerMultiply;
	char Name[40];
	ImFont* DstFont;
	};
	typedef struct ImFontConfig ImFontConfig;
	struct ImFontGlyph
	{
	ImWchar Codepoint;
	float AdvanceX;
	float X0, Y0, X1, Y1;
	float U0, V0, U1, V1;
	};
	typedef struct ImFontGlyph ImFontGlyph;
	enum ImFontAtlasFlags_
	{
	ImFontAtlasFlags_NoPowerOfTwoHeight = 1 << 0,
	ImFontAtlasFlags_NoMouseCursors = 1 << 1
	};
	struct ImFontAtlas
	{
	ImFontAtlasFlags Flags;
	ImTextureID TexID;
	int TexDesiredWidth;
	int TexGlyphPadding;
	unsigned char* TexPixelsAlpha8;
	unsigned int* TexPixelsRGBA32;
	int TexWidth;
	int TexHeight;
	ImVec2 TexUvScale;
	ImVec2 TexUvWhitePixel;
	ImVector Fonts;
	ImVector CustomRects;
	ImVector ConfigData;
	int CustomRectIds[1];
	};
	typedef struct ImFontAtlas ImFontAtlas;
	struct ImFont
	{
	float FontSize;
	float Scale;
	ImVec2 DisplayOffset;
	ImVector Glyphs;
	ImVector IndexAdvanceX;
	ImVector IndexLookup;
	const ImFontGlyph* FallbackGlyph;
	float FallbackAdvanceX;
	ImWchar FallbackChar;
	short ConfigDataCount;
	ImFontConfig* ConfigData;
	ImFontAtlas* ContainerAtlas;
	float Ascent, Descent;
	_Bool DirtyLookupTables;
	int MetricsTotalSurface;
	};
	typedef struct ImFont ImFont;
	struct GlyphRangesBuilder
	{
	ImVector UsedChars;
	};
	typedef struct GlyphRangesBuilder GlyphRangesBuilder;
	struct CustomRect
	{
	unsigned int ID;
	unsigned short Width, Height;
	unsigned short X, Y;
	float GlyphAdvanceX;
	ImVec2 GlyphOffset;
	ImFont* Font;
	};
	typedef struct CustomRect CustomRect;
	struct TextRange
	{
	const char* b;
	const char* e;
	};
	typedef struct TextRange TextRange;
	struct Pair
	{
	ImGuiID key;
	union { int val_i; float val_f; void* val_p; };
	};
	typedef struct Pair Pair;
	typedef ImVector ImVector_TextRange;
	typedef ImVector ImVector_ImWchar;
	extern __attribute__((dllexport)) ImGuiContext* igCreateContext(ImFontAtlas* shared_font_atlas);
	extern __attribute__((dllexport)) void igDestroyContext(ImGuiContext* ctx);
	extern __attribute__((dllexport)) ImGuiContext* igGetCurrentContext();
	extern __attribute__((dllexport)) void igSetCurrentContext(ImGuiContext* ctx);
	extern __attribute__((dllexport)) ImGuiIO* igGetIO();
	extern __attribute__((dllexport)) ImGuiStyle* igGetStyle();
	extern __attribute__((dllexport)) void igNewFrame();
	extern __attribute__((dllexport)) void igRender();
	extern __attribute__((dllexport)) ImDrawData* igGetDrawData();
	extern __attribute__((dllexport)) void igEndFrame();
	extern __attribute__((dllexport)) void igShowDemoWindow(_Bool* p_open);
	extern __attribute__((dllexport)) void igShowMetricsWindow(_Bool* p_open);
	extern __attribute__((dllexport)) void igShowStyleEditor(ImGuiStyle* ref);
	extern __attribute__((dllexport)) _Bool igShowStyleSelector(const char* label);
	extern __attribute__((dllexport)) void igShowFontSelector(const char* label);
	extern __attribute__((dllexport)) void igShowUserGuide();
	extern __attribute__((dllexport)) const char* igGetVersion();
	extern __attribute__((dllexport)) void igStyleColorsDark(ImGuiStyle* dst);
	extern __attribute__((dllexport)) void igStyleColorsClassic(ImGuiStyle* dst);
	extern __attribute__((dllexport)) void igStyleColorsLight(ImGuiStyle* dst);
	extern __attribute__((dllexport)) _Bool igBegin(const char* name,_Bool* p_open,ImGuiWindowFlags flags);
	extern __attribute__((dllexport)) void igEnd();
	extern __attribute__((dllexport)) _Bool igBeginChildStr(const char* str_id,const ImVec2 size,_Bool border,ImGuiWindowFlags flags);
	extern __attribute__((dllexport)) _Bool igBeginChildID(ImGuiID id,const ImVec2 size,_Bool border,ImGuiWindowFlags flags);
	extern __attribute__((dllexport)) void igEndChild();
	extern __attribute__((dllexport)) _Bool igIsWindowAppearing();
	extern __attribute__((dllexport)) _Bool igIsWindowCollapsed();
	extern __attribute__((dllexport)) _Bool igIsWindowFocused(ImGuiFocusedFlags flags);
	extern __attribute__((dllexport)) _Bool igIsWindowHovered(ImGuiHoveredFlags flags);
	extern __attribute__((dllexport)) ImDrawList* igGetWindowDrawList();
	extern __attribute__((dllexport)) ImVec2 igGetWindowPos();
	extern __attribute__((dllexport)) ImVec2 igGetWindowSize();
	extern __attribute__((dllexport)) float igGetWindowWidth();
	extern __attribute__((dllexport)) float igGetWindowHeight();
	extern __attribute__((dllexport)) ImVec2 igGetContentRegionMax();
	extern __attribute__((dllexport)) ImVec2 igGetContentRegionAvail();
	extern __attribute__((dllexport)) float igGetContentRegionAvailWidth();
	extern __attribute__((dllexport)) ImVec2 igGetWindowContentRegionMin();
	extern __attribute__((dllexport)) ImVec2 igGetWindowContentRegionMax();
	extern __attribute__((dllexport)) float igGetWindowContentRegionWidth();
	extern __attribute__((dllexport)) void igSetNextWindowPos(const ImVec2 pos,ImGuiCond cond,const ImVec2 pivot);
	extern __attribute__((dllexport)) void igSetNextWindowSize(const ImVec2 size,ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetNextWindowSizeConstraints(const ImVec2 size_min,const ImVec2 size_max,ImGuiSizeCallback custom_callback,void* custom_callback_data);
	extern __attribute__((dllexport)) void igSetNextWindowContentSize(const ImVec2 size);
	extern __attribute__((dllexport)) void igSetNextWindowCollapsed(_Bool collapsed,ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetNextWindowFocus();
	extern __attribute__((dllexport)) void igSetNextWindowBgAlpha(float alpha);
	extern __attribute__((dllexport)) void igSetWindowPosVec2(const ImVec2 pos,ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetWindowSizeVec2(const ImVec2 size,ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetWindowCollapsedBool(_Bool collapsed,ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetWindowFocus();
	extern __attribute__((dllexport)) void igSetWindowFontScale(float scale);
	extern __attribute__((dllexport)) void igSetWindowPosStr(const char* name,const ImVec2 pos,ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetWindowSizeStr(const char* name,const ImVec2 size,ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetWindowCollapsedStr(const char* name,_Bool collapsed,ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetWindowFocusStr(const char* name);
	extern __attribute__((dllexport)) float igGetScrollX();
	extern __attribute__((dllexport)) float igGetScrollY();
	extern __attribute__((dllexport)) float igGetScrollMaxX();
	extern __attribute__((dllexport)) float igGetScrollMaxY();
	extern __attribute__((dllexport)) void igSetScrollX(float scroll_x);
	extern __attribute__((dllexport)) void igSetScrollY(float scroll_y);
	extern __attribute__((dllexport)) void igSetScrollHere(float center_y_ratio);
	extern __attribute__((dllexport)) void igSetScrollFromPosY(float pos_y,float center_y_ratio);
	extern __attribute__((dllexport)) void igPushFont(ImFont* font);
	extern __attribute__((dllexport)) void igPopFont();
	extern __attribute__((dllexport)) void igPushStyleColorU32(ImGuiCol idx,ImU32 col);
	extern __attribute__((dllexport)) void igPushStyleColorVec4(ImGuiCol idx,const ImVec4 col);
	extern __attribute__((dllexport)) void igPopStyleColor(int count);
	extern __attribute__((dllexport)) void igPushStyleVarFloat(ImGuiStyleVar idx,float val);
	extern __attribute__((dllexport)) void igPushStyleVarVec2(ImGuiStyleVar idx,const ImVec2 val);
	extern __attribute__((dllexport)) void igPopStyleVar(int count);
	extern __attribute__((dllexport)) const ImVec4* igGetStyleColorVec4(ImGuiCol idx);
	extern __attribute__((dllexport)) ImFont* igGetFont();
	extern __attribute__((dllexport)) float igGetFontSize();
	extern __attribute__((dllexport)) ImVec2 igGetFontTexUvWhitePixel();
	extern __attribute__((dllexport)) ImU32 igGetColorU32Col(ImGuiCol idx,float alpha_mul);
	extern __attribute__((dllexport)) ImU32 igGetColorU32Vec4(const ImVec4 col);
	extern __attribute__((dllexport)) ImU32 igGetColorU32U32(ImU32 col);
	extern __attribute__((dllexport)) void igPushItemWidth(float item_width);
	extern __attribute__((dllexport)) void igPopItemWidth();
	extern __attribute__((dllexport)) float igCalcItemWidth();
	extern __attribute__((dllexport)) void igPushTextWrapPos(float wrap_pos_x);
	extern __attribute__((dllexport)) void igPopTextWrapPos();
	extern __attribute__((dllexport)) void igPushAllowKeyboardFocus(_Bool allow_keyboard_focus);
	extern __attribute__((dllexport)) void igPopAllowKeyboardFocus();
	extern __attribute__((dllexport)) void igPushButtonRepeat(_Bool repeat);
	extern __attribute__((dllexport)) void igPopButtonRepeat();
	extern __attribute__((dllexport)) void igSeparator();
	extern __attribute__((dllexport)) void igSameLine(float pos_x,float spacing_w);
	extern __attribute__((dllexport)) void igNewLine();
	extern __attribute__((dllexport)) void igSpacing();
	extern __attribute__((dllexport)) void igDummy(const ImVec2 size);
	extern __attribute__((dllexport)) void igIndent(float indent_w);
	extern __attribute__((dllexport)) void igUnindent(float indent_w);
	extern __attribute__((dllexport)) void igBeginGroup();
	extern __attribute__((dllexport)) void igEndGroup();
	extern __attribute__((dllexport)) ImVec2 igGetCursorPos();
	extern __attribute__((dllexport)) float igGetCursorPosX();
	extern __attribute__((dllexport)) float igGetCursorPosY();
	extern __attribute__((dllexport)) void igSetCursorPos(const ImVec2 local_pos);
	extern __attribute__((dllexport)) void igSetCursorPosX(float x);
	extern __attribute__((dllexport)) void igSetCursorPosY(float y);
	extern __attribute__((dllexport)) ImVec2 igGetCursorStartPos();
	extern __attribute__((dllexport)) ImVec2 igGetCursorScreenPos();
	extern __attribute__((dllexport)) void igSetCursorScreenPos(const ImVec2 screen_pos);
	extern __attribute__((dllexport)) void igAlignTextToFramePadding();
	extern __attribute__((dllexport)) float igGetTextLineHeight();
	extern __attribute__((dllexport)) float igGetTextLineHeightWithSpacing();
	extern __attribute__((dllexport)) float igGetFrameHeight();
	extern __attribute__((dllexport)) float igGetFrameHeightWithSpacing();
	extern __attribute__((dllexport)) void igPushIDStr(const char* str_id);
	extern __attribute__((dllexport)) void igPushIDRange(const char* str_id_begin,const char* str_id_end);
	extern __attribute__((dllexport)) void igPushIDPtr(const void* ptr_id);
	extern __attribute__((dllexport)) void igPushIDInt(int int_id);
	extern __attribute__((dllexport)) void igPopID();
	extern __attribute__((dllexport)) ImGuiID igGetIDStr(const char* str_id);
	extern __attribute__((dllexport)) ImGuiID igGetIDStrStr(const char* str_id_begin,const char* str_id_end);
	extern __attribute__((dllexport)) ImGuiID igGetIDPtr(const void* ptr_id);
	extern __attribute__((dllexport)) void igTextUnformatted(const char* text,const char* text_end);
	extern __attribute__((dllexport)) void igText(const char* fmt,...);
	extern __attribute__((dllexport)) void igTextV(const char* fmt,va_list args);
	extern __attribute__((dllexport)) void igTextColored(const ImVec4 col,const char* fmt,...);
	extern __attribute__((dllexport)) void igTextColoredV(const ImVec4 col,const char* fmt,va_list args);
	extern __attribute__((dllexport)) void igTextDisabled(const char* fmt,...);
	extern __attribute__((dllexport)) void igTextDisabledV(const char* fmt,va_list args);
	extern __attribute__((dllexport)) void igTextWrapped(const char* fmt,...);
	extern __attribute__((dllexport)) void igTextWrappedV(const char* fmt,va_list args);
	extern __attribute__((dllexport)) void igLabelText(const char* label,const char* fmt,...);
	extern __attribute__((dllexport)) void igLabelTextV(const char* label,const char* fmt,va_list args);
	extern __attribute__((dllexport)) void igBulletText(const char* fmt,...);
	extern __attribute__((dllexport)) void igBulletTextV(const char* fmt,va_list args);
	extern __attribute__((dllexport)) _Bool igButton(const char* label,const ImVec2 size);
	extern __attribute__((dllexport)) _Bool igSmallButton(const char* label);
	extern __attribute__((dllexport)) _Bool igArrowButton(const char* str_id,ImGuiDir dir);
	extern __attribute__((dllexport)) _Bool igInvisibleButton(const char* str_id,const ImVec2 size);
	extern __attribute__((dllexport)) void igImage(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,const ImVec4 tint_col,const ImVec4 border_col);
	extern __attribute__((dllexport)) _Bool igImageButton(ImTextureID user_texture_id,const ImVec2 size,const ImVec2 uv0,const ImVec2 uv1,int frame_padding,const ImVec4 bg_col,const ImVec4 tint_col);
	extern __attribute__((dllexport)) _Bool igCheckbox(const char* label,_Bool* v);
	extern __attribute__((dllexport)) _Bool igCheckboxFlags(const char* label,unsigned int* flags,unsigned int flags_value);
	extern __attribute__((dllexport)) _Bool igRadioButtonBool(const char* label,_Bool active);
	extern __attribute__((dllexport)) _Bool igRadioButtonIntPtr(const char* label,int* v,int v_button);
	extern __attribute__((dllexport)) void igPlotLinesFloatPtr(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
	extern __attribute__((dllexport)) void igPlotLinesFnPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
	extern __attribute__((dllexport)) void igPlotHistogramFloatPtr(const char* label,const float* values,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size,int stride);
	extern __attribute__((dllexport)) void igPlotHistogramFnPtr(const char* label,float(*values_getter)(void* data,int idx),void* data,int values_count,int values_offset,const char* overlay_text,float scale_min,float scale_max,ImVec2 graph_size);
	extern __attribute__((dllexport)) void igProgressBar(float fraction,const ImVec2 size_arg,const char* overlay);
	extern __attribute__((dllexport)) void igBullet();
	extern __attribute__((dllexport)) _Bool igBeginCombo(const char* label,const char* preview_value,ImGuiComboFlags flags);
	extern __attribute__((dllexport)) void igEndCombo();
	extern __attribute__((dllexport)) _Bool igComboStr_arr(const char* label,int* current_item,const char* const items[],int items_count,int popup_max_height_in_items);
	extern __attribute__((dllexport)) _Bool igComboStr(const char* label,int* current_item,const char* items_separated_by_zeros,int popup_max_height_in_items);
	extern __attribute__((dllexport)) _Bool igComboFnPtr(const char* label,int* current_item,_Bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int popup_max_height_in_items);
	extern __attribute__((dllexport)) _Bool igDragFloat(const char* label,float* v,float v_speed,float v_min,float v_max,const char* display_format,float power);
	extern __attribute__((dllexport)) _Bool igDragFloat2(const char* label,float v[2],float v_speed,float v_min,float v_max,const char* display_format,float power);
	extern __attribute__((dllexport)) _Bool igDragFloat3(const char* label,float v[3],float v_speed,float v_min,float v_max,const char* display_format,float power);
	extern __attribute__((dllexport)) _Bool igDragFloat4(const char* label,float v[4],float v_speed,float v_min,float v_max,const char* display_format,float power);
	extern __attribute__((dllexport)) _Bool igDragFloatRange2(const char* label,float* v_current_min,float* v_current_max,float v_speed,float v_min,float v_max,const char* display_format,const char* display_format_max,float power);
	extern __attribute__((dllexport)) _Bool igDragInt(const char* label,int* v,float v_speed,int v_min,int v_max,const char* display_format);
	extern __attribute__((dllexport)) _Bool igDragInt2(const char* label,int v[2],float v_speed,int v_min,int v_max,const char* display_format);
	extern __attribute__((dllexport)) _Bool igDragInt3(const char* label,int v[3],float v_speed,int v_min,int v_max,const char* display_format);
	extern __attribute__((dllexport)) _Bool igDragInt4(const char* label,int v[4],float v_speed,int v_min,int v_max,const char* display_format);
	extern __attribute__((dllexport)) _Bool igDragIntRange2(const char* label,int* v_current_min,int* v_current_max,float v_speed,int v_min,int v_max,const char* display_format,const char* display_format_max);
	extern __attribute__((dllexport)) _Bool igInputText(const char* label,char* buf,size_t buf_size,ImGuiInputTextFlags flags,ImGuiTextEditCallback callback,void* user_data);
	extern __attribute__((dllexport)) _Bool igInputTextMultiline(const char* label,char* buf,size_t buf_size,const ImVec2 size,ImGuiInputTextFlags flags,ImGuiTextEditCallback callback,void* user_data);
	extern __attribute__((dllexport)) _Bool igInputFloat(const char* label,float* v,float step,float step_fast,int decimal_precision,ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igInputFloat2(const char* label,float v[2],int decimal_precision,ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igInputFloat3(const char* label,float v[3],int decimal_precision,ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igInputFloat4(const char* label,float v[4],int decimal_precision,ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igInputInt(const char* label,int* v,int step,int step_fast,ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igInputInt2(const char* label,int v[2],ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igInputInt3(const char* label,int v[3],ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igInputInt4(const char* label,int v[4],ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igInputDouble(const char* label,double* v,double step,double step_fast,const char* display_format,ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igSliderFloat(const char* label,float* v,float v_min,float v_max,const char* display_format,float power);
	extern __attribute__((dllexport)) _Bool igSliderFloat2(const char* label,float v[2],float v_min,float v_max,const char* display_format,float power);
	extern __attribute__((dllexport)) _Bool igSliderFloat3(const char* label,float v[3],float v_min,float v_max,const char* display_format,float power);
	extern __attribute__((dllexport)) _Bool igSliderFloat4(const char* label,float v[4],float v_min,float v_max,const char* display_format,float power);
	extern __attribute__((dllexport)) _Bool igSliderAngle(const char* label,float* v_rad,float v_degrees_min,float v_degrees_max);
	extern __attribute__((dllexport)) _Bool igSliderInt(const char* label,int* v,int v_min,int v_max,const char* display_format);
	extern __attribute__((dllexport)) _Bool igSliderInt2(const char* label,int v[2],int v_min,int v_max,const char* display_format);
	extern __attribute__((dllexport)) _Bool igSliderInt3(const char* label,int v[3],int v_min,int v_max,const char* display_format);
	extern __attribute__((dllexport)) _Bool igSliderInt4(const char* label,int v[4],int v_min,int v_max,const char* display_format);
	extern __attribute__((dllexport)) _Bool igVSliderFloat(const char* label,const ImVec2 size,float* v,float v_min,float v_max,const char* display_format,float power);
	extern __attribute__((dllexport)) _Bool igVSliderInt(const char* label,const ImVec2 size,int* v,int v_min,int v_max,const char* display_format);
	extern __attribute__((dllexport)) _Bool igColorEdit3(const char* label,float col[3],ImGuiColorEditFlags flags);
	extern __attribute__((dllexport)) _Bool igColorEdit4(const char* label,float col[4],ImGuiColorEditFlags flags);
	extern __attribute__((dllexport)) _Bool igColorPicker3(const char* label,float col[3],ImGuiColorEditFlags flags);
	extern __attribute__((dllexport)) _Bool igColorPicker4(const char* label,float col[4],ImGuiColorEditFlags flags,const float* ref_col);
	extern __attribute__((dllexport)) _Bool igColorButton(const char* desc_id,const ImVec4 col,ImGuiColorEditFlags flags,ImVec2 size);
	extern __attribute__((dllexport)) void igSetColorEditOptions(ImGuiColorEditFlags flags);
	extern __attribute__((dllexport)) _Bool igTreeNodeStr(const char* label);
	extern __attribute__((dllexport)) _Bool igTreeNodeStrStr(const char* str_id,const char* fmt,...);
	extern __attribute__((dllexport)) _Bool igTreeNodePtr(const void* ptr_id,const char* fmt,...);
	extern __attribute__((dllexport)) _Bool igTreeNodeVStr(const char* str_id,const char* fmt,va_list args);
	extern __attribute__((dllexport)) _Bool igTreeNodeVPtr(const void* ptr_id,const char* fmt,va_list args);
	extern __attribute__((dllexport)) _Bool igTreeNodeExStr(const char* label,ImGuiTreeNodeFlags flags);
	extern __attribute__((dllexport)) _Bool igTreeNodeExStrStr(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,...);
	extern __attribute__((dllexport)) _Bool igTreeNodeExPtr(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,...);
	extern __attribute__((dllexport)) _Bool igTreeNodeExVStr(const char* str_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args);
	extern __attribute__((dllexport)) _Bool igTreeNodeExVPtr(const void* ptr_id,ImGuiTreeNodeFlags flags,const char* fmt,va_list args);
	extern __attribute__((dllexport)) void igTreePushStr(const char* str_id);
	extern __attribute__((dllexport)) void igTreePushPtr(const void* ptr_id);
	extern __attribute__((dllexport)) void igTreePop();
	extern __attribute__((dllexport)) void igTreeAdvanceToLabelPos();
	extern __attribute__((dllexport)) float igGetTreeNodeToLabelSpacing();
	extern __attribute__((dllexport)) void igSetNextTreeNodeOpen(_Bool is_open,ImGuiCond cond);
	extern __attribute__((dllexport)) _Bool igCollapsingHeader(const char* label,ImGuiTreeNodeFlags flags);
	extern __attribute__((dllexport)) _Bool igCollapsingHeaderBoolPtr(const char* label,_Bool* p_open,ImGuiTreeNodeFlags flags);
	extern __attribute__((dllexport)) _Bool igSelectableBool(const char* label,_Bool selected,ImGuiSelectableFlags flags,const ImVec2 size);
	extern __attribute__((dllexport)) _Bool igSelectableBoolPtr(const char* label,_Bool* p_selected,ImGuiSelectableFlags flags,const ImVec2 size);
	extern __attribute__((dllexport)) _Bool igListBoxStr_arr(const char* label,int* current_item,const char* const items[],int items_count,int height_in_items);
	extern __attribute__((dllexport)) _Bool igListBoxFnPtr(const char* label,int* current_item,_Bool(*items_getter)(void* data,int idx,const char** out_text),void* data,int items_count,int height_in_items);
	extern __attribute__((dllexport)) _Bool igListBoxHeaderVec2(const char* label,const ImVec2 size);
	extern __attribute__((dllexport)) _Bool igListBoxHeaderInt(const char* label,int items_count,int height_in_items);
	extern __attribute__((dllexport)) void igListBoxFooter();
	extern __attribute__((dllexport)) void igValueBool(const char* prefix,_Bool b);
	extern __attribute__((dllexport)) void igValueInt(const char* prefix,int v);
	extern __attribute__((dllexport)) void igValueUint(const char* prefix,unsigned int v);
	extern __attribute__((dllexport)) void igValueFloat(const char* prefix,float v,const char* float_format);
	extern __attribute__((dllexport)) void igSetTooltip(const char* fmt,...);
	extern __attribute__((dllexport)) void igSetTooltipV(const char* fmt,va_list args);
	extern __attribute__((dllexport)) void igBeginTooltip();
	extern __attribute__((dllexport)) void igEndTooltip();
	extern __attribute__((dllexport)) _Bool igBeginMainMenuBar();
	extern __attribute__((dllexport)) void igEndMainMenuBar();
	extern __attribute__((dllexport)) _Bool igBeginMenuBar();
	extern __attribute__((dllexport)) void igEndMenuBar();
	extern __attribute__((dllexport)) _Bool igBeginMenu(const char* label,_Bool enabled);
	extern __attribute__((dllexport)) void igEndMenu();
	extern __attribute__((dllexport)) _Bool igMenuItemBool(const char* label,const char* shortcut,_Bool selected,_Bool enabled);
	extern __attribute__((dllexport)) _Bool igMenuItemBoolPtr(const char* label,const char* shortcut,_Bool* p_selected,_Bool enabled);
	extern __attribute__((dllexport)) void igOpenPopup(const char* str_id);
	extern __attribute__((dllexport)) _Bool igBeginPopup(const char* str_id,ImGuiWindowFlags flags);
	extern __attribute__((dllexport)) _Bool igBeginPopupContextItem(const char* str_id,int mouse_button);
	extern __attribute__((dllexport)) _Bool igBeginPopupContextWindow(const char* str_id,int mouse_button,_Bool also_over_items);
	extern __attribute__((dllexport)) _Bool igBeginPopupContextVoid(const char* str_id,int mouse_button);
	extern __attribute__((dllexport)) _Bool igBeginPopupModal(const char* name,_Bool* p_open,ImGuiWindowFlags flags);
	extern __attribute__((dllexport)) void igEndPopup();
	extern __attribute__((dllexport)) _Bool igOpenPopupOnItemClick(const char* str_id,int mouse_button);
	extern __attribute__((dllexport)) _Bool igIsPopupOpen(const char* str_id);
	extern __attribute__((dllexport)) void igCloseCurrentPopup();
	extern __attribute__((dllexport)) void igColumns(int count,const char* id,_Bool border);
	extern __attribute__((dllexport)) void igNextColumn();
	extern __attribute__((dllexport)) int igGetColumnIndex();
	extern __attribute__((dllexport)) float igGetColumnWidth(int column_index);
	extern __attribute__((dllexport)) void igSetColumnWidth(int column_index,float width);
	extern __attribute__((dllexport)) float igGetColumnOffset(int column_index);
	extern __attribute__((dllexport)) void igSetColumnOffset(int column_index,float offset_x);
	extern __attribute__((dllexport)) int igGetColumnsCount();
	extern __attribute__((dllexport)) void igLogToTTY(int max_depth);
	extern __attribute__((dllexport)) void igLogToFile(int max_depth,const char* filename);
	extern __attribute__((dllexport)) void igLogToClipboard(int max_depth);
	extern __attribute__((dllexport)) void igLogFinish();
	extern __attribute__((dllexport)) void igLogButtons();
	extern __attribute__((dllexport)) _Bool igBeginDragDropSource(ImGuiDragDropFlags flags);
	extern __attribute__((dllexport)) _Bool igSetDragDropPayload(const char* type,const void* data,size_t size,ImGuiCond cond);
	extern __attribute__((dllexport)) void igEndDragDropSource();
	extern __attribute__((dllexport)) _Bool igBeginDragDropTarget();
	extern __attribute__((dllexport)) const ImGuiPayload* igAcceptDragDropPayload(const char* type,ImGuiDragDropFlags flags);
	extern __attribute__((dllexport)) void igEndDragDropTarget();
	extern __attribute__((dllexport)) void igPushClipRect(const ImVec2 clip_rect_min,const ImVec2 clip_rect_max,_Bool intersect_with_current_clip_rect);
	extern __attribute__((dllexport)) void igPopClipRect();
	extern __attribute__((dllexport)) void igSetItemDefaultFocus();
	extern __attribute__((dllexport)) void igSetKeyboardFocusHere(int offset);
	extern __attribute__((dllexport)) _Bool igIsItemHovered(ImGuiHoveredFlags flags);
	extern __attribute__((dllexport)) _Bool igIsItemActive();
	extern __attribute__((dllexport)) _Bool igIsItemFocused();
	extern __attribute__((dllexport)) _Bool igIsItemClicked(int mouse_button);
	extern __attribute__((dllexport)) _Bool igIsItemVisible();
	extern __attribute__((dllexport)) _Bool igIsAnyItemHovered();
	extern __attribute__((dllexport)) _Bool igIsAnyItemActive();
	extern __attribute__((dllexport)) _Bool igIsAnyItemFocused();
	extern __attribute__((dllexport)) ImVec2 igGetItemRectMin();
	extern __attribute__((dllexport)) ImVec2 igGetItemRectMax();
	extern __attribute__((dllexport)) ImVec2 igGetItemRectSize();
	extern __attribute__((dllexport)) void igSetItemAllowOverlap();
	extern __attribute__((dllexport)) _Bool igIsRectVisible(const ImVec2 size);
	extern __attribute__((dllexport)) _Bool igIsRectVisibleVec2(const ImVec2 rect_min,const ImVec2 rect_max);
	extern __attribute__((dllexport)) float igGetTime();
	extern __attribute__((dllexport)) int igGetFrameCount();
	extern __attribute__((dllexport)) ImDrawList* igGetOverlayDrawList();
	extern __attribute__((dllexport)) ImDrawListSharedData* igGetDrawListSharedData();
	extern __attribute__((dllexport)) const char* igGetStyleColorName(ImGuiCol idx);
	extern __attribute__((dllexport)) void igSetStateStorage(ImGuiStorage* storage);
	extern __attribute__((dllexport)) ImGuiStorage* igGetStateStorage();
	extern __attribute__((dllexport)) ImVec2 igCalcTextSize(const char* text,const char* text_end,_Bool hide_text_after_double_hash,float wrap_width);
	extern __attribute__((dllexport)) void igCalcListClipping(int items_count,float items_height,int* out_items_display_start,int* out_items_display_end);
	extern __attribute__((dllexport)) _Bool igBeginChildFrame(ImGuiID id,const ImVec2 size,ImGuiWindowFlags flags);
	extern __attribute__((dllexport)) void igEndChildFrame();
	extern __attribute__((dllexport)) ImVec4 igColorConvertU32ToFloat4(ImU32 in);
	extern __attribute__((dllexport)) ImU32 igColorConvertFloat4ToU32(const ImVec4 in);
	extern __attribute__((dllexport)) void igColorConvertRGBtoHSV(float r,float g,float b,float out_h,float out_s,float out_v);
	extern __attribute__((dllexport)) void igColorConvertHSVtoRGB(float h,float s,float v,float out_r,float out_g,float out_b);
	extern __attribute__((dllexport)) int igGetKeyIndex(ImGuiKey imgui_key);
	extern __attribute__((dllexport)) _Bool igIsKeyDown(int user_key_index);
	extern __attribute__((dllexport)) _Bool igIsKeyPressed(int user_key_index,_Bool repeat);
	extern __attribute__((dllexport)) _Bool igIsKeyReleased(int user_key_index);
	extern __attribute__((dllexport)) int igGetKeyPressedAmount(int key_index,float repeat_delay,float rate);
	extern __attribute__((dllexport)) _Bool igIsMouseDown(int button);
	extern __attribute__((dllexport)) _Bool igIsAnyMouseDown();
	extern __attribute__((dllexport)) _Bool igIsMouseClicked(int button,_Bool repeat);
	extern __attribute__((dllexport)) _Bool igIsMouseDoubleClicked(int button);
	extern __attribute__((dllexport)) _Bool igIsMouseReleased(int button);
	extern __attribute__((dllexport)) _Bool igIsMouseDragging(int button,float lock_threshold);
	extern __attribute__((dllexport)) _Bool igIsMouseHoveringRect(const ImVec2 r_min,const ImVec2 r_max,_Bool clip);
	extern __attribute__((dllexport)) _Bool igIsMousePosValid(const ImVec2* mouse_pos);
	extern __attribute__((dllexport)) ImVec2 igGetMousePos();
	extern __attribute__((dllexport)) ImVec2 igGetMousePosOnOpeningCurrentPopup();
	extern __attribute__((dllexport)) ImVec2 igGetMouseDragDelta(int button,float lock_threshold);
	extern __attribute__((dllexport)) void igResetMouseDragDelta(int button);
	extern __attribute__((dllexport)) ImGuiMouseCursor igGetMouseCursor();
	extern __attribute__((dllexport)) void igSetMouseCursor(ImGuiMouseCursor type);
	extern __attribute__((dllexport)) void igCaptureKeyboardFromApp(_Bool capture);
	extern __attribute__((dllexport)) void igCaptureMouseFromApp(_Bool capture);
	extern __attribute__((dllexport)) const char* igGetClipboardText();
	extern __attribute__((dllexport)) void igSetClipboardText(const char* text);
	extern __attribute__((dllexport)) void igSetAllocatorFunctions(void*(*alloc_func)(size_t sz,void* user_data),void(*free_func)(void* ptr,void* user_data),void* user_data);
	extern __attribute__((dllexport)) void* igMemAlloc(size_t size);
	extern __attribute__((dllexport)) void igMemFree(void* ptr);
	extern __attribute__((dllexport)) void ImGuiStyle_ScaleAllSizes(ImGuiStyle* self,float scale_factor);
	extern __attribute__((dllexport)) void ImGuiIO_AddInputCharacter(ImGuiIO* self,ImWchar c);
	extern __attribute__((dllexport)) void ImGuiIO_AddInputCharactersUTF8(ImGuiIO* self,const char* utf8_chars);
	extern __attribute__((dllexport)) inline void ImGuiIO_ClearInputCharacters(ImGuiIO* self);
	extern __attribute__((dllexport)) const char* TextRange_begin(TextRange* self);
	extern __attribute__((dllexport)) const char* TextRange_end(TextRange* self);
	extern __attribute__((dllexport)) _Bool TextRange_empty(TextRange* self);
	extern __attribute__((dllexport)) char TextRange_front(TextRange* self);
	extern __attribute__((dllexport)) _Bool TextRange_is_blank(TextRange* self,char c);
	extern __attribute__((dllexport)) void TextRange_trim_blanks(TextRange* self);
	extern __attribute__((dllexport)) void TextRange_split(TextRange* self,char separator,ImVector_TextRange out);
	extern __attribute__((dllexport)) _Bool ImGuiTextFilter_Draw(ImGuiTextFilter* self,const char* label,float width);
	extern __attribute__((dllexport)) _Bool ImGuiTextFilter_PassFilter(ImGuiTextFilter* self,const char* text,const char* text_end);
	extern __attribute__((dllexport)) void ImGuiTextFilter_Build(ImGuiTextFilter* self);
	extern __attribute__((dllexport)) void ImGuiTextFilter_Clear(ImGuiTextFilter* self);
	extern __attribute__((dllexport)) _Bool ImGuiTextFilter_IsActive(ImGuiTextFilter* self);
	extern __attribute__((dllexport)) const char* ImGuiTextBuffer_begin(ImGuiTextBuffer* self);
	extern __attribute__((dllexport)) const char* ImGuiTextBuffer_end(ImGuiTextBuffer* self);
	extern __attribute__((dllexport)) int ImGuiTextBuffer_size(ImGuiTextBuffer* self);
	extern __attribute__((dllexport)) _Bool ImGuiTextBuffer_empty(ImGuiTextBuffer* self);
	extern __attribute__((dllexport)) void ImGuiTextBuffer_clear(ImGuiTextBuffer* self);
	extern __attribute__((dllexport)) void ImGuiTextBuffer_reserve(ImGuiTextBuffer* self,int capacity);
	extern __attribute__((dllexport)) const char* ImGuiTextBuffer_c_str(ImGuiTextBuffer* self);
	extern __attribute__((dllexport)) void ImGuiTextBuffer_appendfv(ImGuiTextBuffer* self,const char* fmt,va_list args);
	extern __attribute__((dllexport)) void ImGuiStorage_Clear(ImGuiStorage* self);
	extern __attribute__((dllexport)) int ImGuiStorage_GetInt(ImGuiStorage* self,ImGuiID key,int default_val);
	extern __attribute__((dllexport)) void ImGuiStorage_SetInt(ImGuiStorage* self,ImGuiID key,int val);
	extern __attribute__((dllexport)) _Bool ImGuiStorage_GetBool(ImGuiStorage* self,ImGuiID key,_Bool default_val);
	extern __attribute__((dllexport)) void ImGuiStorage_SetBool(ImGuiStorage* self,ImGuiID key,_Bool val);
	extern __attribute__((dllexport)) float ImGuiStorage_GetFloat(ImGuiStorage* self,ImGuiID key,float default_val);
	extern __attribute__((dllexport)) void ImGuiStorage_SetFloat(ImGuiStorage* self,ImGuiID key,float val);
	extern __attribute__((dllexport)) void* ImGuiStorage_GetVoidPtr(ImGuiStorage* self,ImGuiID key);
	extern __attribute__((dllexport)) void ImGuiStorage_SetVoidPtr(ImGuiStorage* self,ImGuiID key,void* val);
	extern __attribute__((dllexport)) int* ImGuiStorage_GetIntRef(ImGuiStorage* self,ImGuiID key,int default_val);
	extern __attribute__((dllexport)) _Bool* ImGuiStorage_GetBoolRef(ImGuiStorage* self,ImGuiID key,_Bool default_val);
	extern __attribute__((dllexport)) float* ImGuiStorage_GetFloatRef(ImGuiStorage* self,ImGuiID key,float default_val);
	extern __attribute__((dllexport)) void** ImGuiStorage_GetVoidPtrRef(ImGuiStorage* self,ImGuiID key,void* default_val);
	extern __attribute__((dllexport)) void ImGuiStorage_SetAllInt(ImGuiStorage* self,int val);
	extern __attribute__((dllexport)) void ImGuiStorage_BuildSortByKey(ImGuiStorage* self);
	extern __attribute__((dllexport)) void ImGuiTextEditCallbackData_DeleteChars(ImGuiTextEditCallbackData* self,int pos,int bytes_count);
	extern __attribute__((dllexport)) void ImGuiTextEditCallbackData_InsertChars(ImGuiTextEditCallbackData* self,int pos,const char* text,const char* text_end);
	extern __attribute__((dllexport)) _Bool ImGuiTextEditCallbackData_HasSelection(ImGuiTextEditCallbackData* self);
	extern __attribute__((dllexport)) void ImGuiPayload_Clear(ImGuiPayload* self);
	extern __attribute__((dllexport)) _Bool ImGuiPayload_IsDataType(ImGuiPayload* self,const char* type);
	extern __attribute__((dllexport)) _Bool ImGuiPayload_IsPreview(ImGuiPayload* self);
	extern __attribute__((dllexport)) _Bool ImGuiPayload_IsDelivery(ImGuiPayload* self);
	extern __attribute__((dllexport)) inline void ImColor_SetHSV(ImColor* self,float h,float s,float v,float a);
	extern __attribute__((dllexport)) ImColor ImColor_HSV(ImColor* self,float h,float s,float v,float a);
	extern __attribute__((dllexport)) _Bool ImGuiListClipper_Step(ImGuiListClipper* self);
	extern __attribute__((dllexport)) void ImGuiListClipper_Begin(ImGuiListClipper* self,int items_count,float items_height);
	extern __attribute__((dllexport)) void ImGuiListClipper_End(ImGuiListClipper* self);
	extern __attribute__((dllexport)) void ImDrawList_PushClipRect(ImDrawList* self,ImVec2 clip_rect_min,ImVec2 clip_rect_max,_Bool intersect_with_current_clip_rect);
	extern __attribute__((dllexport)) void ImDrawList_PushClipRectFullScreen(ImDrawList* self);
	extern __attribute__((dllexport)) void ImDrawList_PopClipRect(ImDrawList* self);
	extern __attribute__((dllexport)) void ImDrawList_PushTextureID(ImDrawList* self,ImTextureID texture_id);
	extern __attribute__((dllexport)) void ImDrawList_PopTextureID(ImDrawList* self);
	extern __attribute__((dllexport)) inline ImVec2 ImDrawList_GetClipRectMin(ImDrawList* self);
	extern __attribute__((dllexport)) inline ImVec2 ImDrawList_GetClipRectMax(ImDrawList* self);
	extern __attribute__((dllexport)) void ImDrawList_AddLine(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col,float thickness);
	extern __attribute__((dllexport)) void ImDrawList_AddRect(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col,float rounding,int rounding_corners_flags,float thickness);
	extern __attribute__((dllexport)) void ImDrawList_AddRectFilled(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col,float rounding,int rounding_corners_flags);
	extern __attribute__((dllexport)) void ImDrawList_AddRectFilledMultiColor(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col_upr_left,ImU32 col_upr_right,ImU32 col_bot_right,ImU32 col_bot_left);
	extern __attribute__((dllexport)) void ImDrawList_AddQuad(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,ImU32 col,float thickness);
	extern __attribute__((dllexport)) void ImDrawList_AddQuadFilled(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_AddTriangle(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,ImU32 col,float thickness);
	extern __attribute__((dllexport)) void ImDrawList_AddTriangleFilled(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_AddCircle(ImDrawList* self,const ImVec2 centre,float radius,ImU32 col,int num_segments,float thickness);
	extern __attribute__((dllexport)) void ImDrawList_AddCircleFilled(ImDrawList* self,const ImVec2 centre,float radius,ImU32 col,int num_segments);
	extern __attribute__((dllexport)) void ImDrawList_AddTextVec2(ImDrawList* self,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end);
	extern __attribute__((dllexport)) void ImDrawList_AddTextFontPtr(ImDrawList* self,const ImFont* font,float font_size,const ImVec2 pos,ImU32 col,const char* text_begin,const char* text_end,float wrap_width,const ImVec4* cpu_fine_clip_rect);
	extern __attribute__((dllexport)) void ImDrawList_AddImage(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_AddImageQuad(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,const ImVec2 uv_a,const ImVec2 uv_b,const ImVec2 uv_c,const ImVec2 uv_d,ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_AddImageRounded(ImDrawList* self,ImTextureID user_texture_id,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col,float rounding,int rounding_corners);
	extern __attribute__((dllexport)) void ImDrawList_AddPolyline(ImDrawList* self,const ImVec2* points,const int num_points,ImU32 col,_Bool closed,float thickness);
	extern __attribute__((dllexport)) void ImDrawList_AddConvexPolyFilled(ImDrawList* self,const ImVec2* points,const int num_points,ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_AddBezierCurve(ImDrawList* self,const ImVec2 pos0,const ImVec2 cp0,const ImVec2 cp1,const ImVec2 pos1,ImU32 col,float thickness,int num_segments);
	extern __attribute__((dllexport)) inline void ImDrawList_PathClear(ImDrawList* self);
	extern __attribute__((dllexport)) inline void ImDrawList_PathLineTo(ImDrawList* self,const ImVec2 pos);
	extern __attribute__((dllexport)) inline void ImDrawList_PathLineToMergeDuplicate(ImDrawList* self,const ImVec2 pos);
	extern __attribute__((dllexport)) inline void ImDrawList_PathFillConvex(ImDrawList* self,ImU32 col);
	extern __attribute__((dllexport)) inline void ImDrawList_PathStroke(ImDrawList* self,ImU32 col,_Bool closed,float thickness);
	extern __attribute__((dllexport)) void ImDrawList_PathArcTo(ImDrawList* self,const ImVec2 centre,float radius,float a_min,float a_max,int num_segments);
	extern __attribute__((dllexport)) void ImDrawList_PathArcToFast(ImDrawList* self,const ImVec2 centre,float radius,int a_min_of_12,int a_max_of_12);
	extern __attribute__((dllexport)) void ImDrawList_PathBezierCurveTo(ImDrawList* self,const ImVec2 p1,const ImVec2 p2,const ImVec2 p3,int num_segments);
	extern __attribute__((dllexport)) void ImDrawList_PathRect(ImDrawList* self,const ImVec2 rect_min,const ImVec2 rect_max,float rounding,int rounding_corners_flags);
	extern __attribute__((dllexport)) void ImDrawList_ChannelsSplit(ImDrawList* self,int channels_count);
	extern __attribute__((dllexport)) void ImDrawList_ChannelsMerge(ImDrawList* self);
	extern __attribute__((dllexport)) void ImDrawList_ChannelsSetCurrent(ImDrawList* self,int channel_index);
	extern __attribute__((dllexport)) void ImDrawList_AddCallback(ImDrawList* self,ImDrawCallback callback,void* callback_data);
	extern __attribute__((dllexport)) void ImDrawList_AddDrawCmd(ImDrawList* self);
	extern __attribute__((dllexport)) ImDrawList* ImDrawList_CloneOutput(ImDrawList* self);
	extern __attribute__((dllexport)) void ImDrawList_Clear(ImDrawList* self);
	extern __attribute__((dllexport)) void ImDrawList_ClearFreeMemory(ImDrawList* self);
	extern __attribute__((dllexport)) void ImDrawList_PrimReserve(ImDrawList* self,int idx_count,int vtx_count);
	extern __attribute__((dllexport)) void ImDrawList_PrimRect(ImDrawList* self,const ImVec2 a,const ImVec2 b,ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_PrimRectUV(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 uv_a,const ImVec2 uv_b,ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_PrimQuadUV(ImDrawList* self,const ImVec2 a,const ImVec2 b,const ImVec2 c,const ImVec2 d,const ImVec2 uv_a,const ImVec2 uv_b,const ImVec2 uv_c,const ImVec2 uv_d,ImU32 col);
	extern __attribute__((dllexport)) inline void ImDrawList_PrimWriteVtx(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
	extern __attribute__((dllexport)) inline void ImDrawList_PrimWriteIdx(ImDrawList* self,ImDrawIdx idx);
	extern __attribute__((dllexport)) inline void ImDrawList_PrimVtx(ImDrawList* self,const ImVec2 pos,const ImVec2 uv,ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_UpdateClipRect(ImDrawList* self);
	extern __attribute__((dllexport)) void ImDrawList_UpdateTextureID(ImDrawList* self);
	extern __attribute__((dllexport)) void ImDrawData_Clear(ImDrawData* self);
	extern __attribute__((dllexport)) void ImDrawData_DeIndexAllBuffers(ImDrawData* self);
	extern __attribute__((dllexport)) void ImDrawData_ScaleClipRects(ImDrawData* self,const ImVec2 sc);
	extern __attribute__((dllexport)) ImFont* ImFontAtlas_AddFont(ImFontAtlas* self,const ImFontConfig* font_cfg);
	extern __attribute__((dllexport)) ImFont* ImFontAtlas_AddFontDefault(ImFontAtlas* self,const ImFontConfig* font_cfg);
	extern __attribute__((dllexport)) ImFont* ImFontAtlas_AddFontFromFileTTF(ImFontAtlas* self,const char* filename,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
	extern __attribute__((dllexport)) ImFont* ImFontAtlas_AddFontFromMemoryTTF(ImFontAtlas* self,void* font_data,int font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
	extern __attribute__((dllexport)) ImFont* ImFontAtlas_AddFontFromMemoryCompressedTTF(ImFontAtlas* self,const void* compressed_font_data,int compressed_font_size,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
	extern __attribute__((dllexport)) ImFont* ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(ImFontAtlas* self,const char* compressed_font_data_base85,float size_pixels,const ImFontConfig* font_cfg,const ImWchar* glyph_ranges);
	extern __attribute__((dllexport)) void ImFontAtlas_ClearInputData(ImFontAtlas* self);
	extern __attribute__((dllexport)) void ImFontAtlas_ClearTexData(ImFontAtlas* self);
	extern __attribute__((dllexport)) void ImFontAtlas_ClearFonts(ImFontAtlas* self);
	extern __attribute__((dllexport)) void ImFontAtlas_Clear(ImFontAtlas* self);
	extern __attribute__((dllexport)) _Bool ImFontAtlas_Build(ImFontAtlas* self);
	extern __attribute__((dllexport)) void ImFontAtlas_GetTexDataAsAlpha8(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
	extern __attribute__((dllexport)) void ImFontAtlas_GetTexDataAsRGBA32(ImFontAtlas* self,unsigned char** out_pixels,int* out_width,int* out_height,int* out_bytes_per_pixel);
	extern __attribute__((dllexport)) void ImFontAtlas_SetTexID(ImFontAtlas* self,ImTextureID id);
	extern __attribute__((dllexport)) const ImWchar* ImFontAtlas_GetGlyphRangesDefault(ImFontAtlas* self);
	extern __attribute__((dllexport)) const ImWchar* ImFontAtlas_GetGlyphRangesKorean(ImFontAtlas* self);
	extern __attribute__((dllexport)) const ImWchar* ImFontAtlas_GetGlyphRangesJapanese(ImFontAtlas* self);
	extern __attribute__((dllexport)) const ImWchar* ImFontAtlas_GetGlyphRangesChinese(ImFontAtlas* self);
	extern __attribute__((dllexport)) const ImWchar* ImFontAtlas_GetGlyphRangesCyrillic(ImFontAtlas* self);
	extern __attribute__((dllexport)) const ImWchar* ImFontAtlas_GetGlyphRangesThai(ImFontAtlas* self);
	extern __attribute__((dllexport)) _Bool GlyphRangesBuilder_GetBit(GlyphRangesBuilder* self,int n);
	extern __attribute__((dllexport)) void GlyphRangesBuilder_SetBit(GlyphRangesBuilder* self,int n);
	extern __attribute__((dllexport)) void GlyphRangesBuilder_AddChar(GlyphRangesBuilder* self,ImWchar c);
	extern __attribute__((dllexport)) void GlyphRangesBuilder_AddText(GlyphRangesBuilder* self,const char* text,const char* text_end);
	extern __attribute__((dllexport)) void GlyphRangesBuilder_AddRanges(GlyphRangesBuilder* self,const ImWchar* ranges);
	extern __attribute__((dllexport)) void GlyphRangesBuilder_BuildRanges(GlyphRangesBuilder* self,ImVector_ImWchar* out_ranges);
	extern __attribute__((dllexport)) _Bool CustomRect_IsPacked(CustomRect* self);
	extern __attribute__((dllexport)) int ImFontAtlas_AddCustomRectRegular(ImFontAtlas* self,unsigned int id,int width,int height);
	extern __attribute__((dllexport)) int ImFontAtlas_AddCustomRectFontGlyph(ImFontAtlas* self,ImFont* font,ImWchar id,int width,int height,float advance_x,const ImVec2 offset);
	extern __attribute__((dllexport)) const CustomRect* ImFontAtlas_GetCustomRectByIndex(ImFontAtlas* self,int index);
	extern __attribute__((dllexport)) void ImFontAtlas_CalcCustomRectUV(ImFontAtlas* self,const CustomRect* rect,ImVec2* out_uv_min,ImVec2* out_uv_max);
	extern __attribute__((dllexport)) _Bool ImFontAtlas_GetMouseCursorTexData(ImFontAtlas* self,ImGuiMouseCursor cursor,ImVec2* out_offset,ImVec2* out_size,ImVec2 out_uv_border[2],ImVec2 out_uv_fill[2]);
	extern __attribute__((dllexport)) void ImFont_ClearOutputData(ImFont* self);
	extern __attribute__((dllexport)) void ImFont_BuildLookupTable(ImFont* self);
	extern __attribute__((dllexport)) const ImFontGlyph* ImFont_FindGlyph(ImFont* self,ImWchar c);
	extern __attribute__((dllexport)) const ImFontGlyph* ImFont_FindGlyphNoFallback(ImFont* self,ImWchar c);
	extern __attribute__((dllexport)) void ImFont_SetFallbackChar(ImFont* self,ImWchar c);
	extern __attribute__((dllexport)) float ImFont_GetCharAdvance(ImFont* self,ImWchar c);
	extern __attribute__((dllexport)) _Bool ImFont_IsLoaded(ImFont* self);
	extern __attribute__((dllexport)) const char* ImFont_GetDebugName(ImFont* self);
	extern __attribute__((dllexport)) ImVec2 ImFont_CalcTextSizeA(ImFont* self,float size,float max_width,float wrap_width,const char* text_begin,const char* text_end,const char** remaining);
	extern __attribute__((dllexport)) const char* ImFont_CalcWordWrapPositionA(ImFont* self,float scale,const char* text,const char* text_end,float wrap_width);
	extern __attribute__((dllexport)) void ImFont_RenderChar(ImFont* self,ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,unsigned short c);
	extern __attribute__((dllexport)) void ImFont_RenderText(ImFont* self,ImDrawList* draw_list,float size,ImVec2 pos,ImU32 col,const ImVec4 clip_rect,const char* text_begin,const char* text_end,float wrap_width,_Bool cpu_fine_clip);
	extern __attribute__((dllexport)) void ImFont_GrowIndex(ImFont* self,int new_size);
	extern __attribute__((dllexport)) void ImFont_AddGlyph(ImFont* self,ImWchar c,float x0,float y0,float x1,float y1,float u0,float v0,float u1,float v1,float advance_x);
	extern __attribute__((dllexport)) void ImFont_AddRemapChar(ImFont* self,ImWchar dst,ImWchar src,_Bool overwrite_dst);
	extern __attribute__((dllexport)) void igLogText(const char *fmt, ...);
	extern __attribute__((dllexport)) void ImGuiTextBuffer_appendf(struct ImGuiTextBuffer *buffer, const char *fmt, ...);
	extern __attribute__((dllexport)) void ImFontConfig_DefaultConstructor(ImFontConfig *config);
	]]
--[[ END AUTOGENERATED SEGMENT ]]
local ffi = require"ffi"

--uncomment to debug cdef calls
---[[
local ffi_cdef = ffi.cdef
ffi.cdef = function(code)
	local ret,err = pcall(ffi_cdef,code)
	if not ret then
		
		local lineN = 1
		for line in code:gmatch("([^\n\r]*)\r?\n") do
			print(lineN, line)
			lineN = lineN + 1
		end
		print(err)
		error"bad cdef"
	end
end
--]]

assert(cdecl, "imgui.lua not properly build")
ffi.cdef(cdecl)

-- local file = io.open([[c:/luagl/lua/cimgui.txt]],"r")
-- local strfile = file:read"*a"
-- file:close()
-- ffi.cdef(strfile)

-- fonts ---------------------
ffi.cdef[[

typedef struct ImFontGlyph Glyph;

typedef int ImFontAtlasFlags; 

typedef struct ImFontAtlas ImFontAtlas;

typedef struct ImGuiContext ImGuiContext;
typedef struct ImFontConfig ImFontConfig;

typedef struct ImFont ImFont;

typedef struct ImDrawList ImDrawList;	
]]

-- glfw3 implementation and extras
ffi.cdef[[
float igGET_FLT_MAX();

//////////////// glfw3 gl3 Implementation
int Do_gl3wInit(void);
typedef struct GLFWwindow GLFWwindow;
typedef struct {
	// Data
	GLFWwindow*  g_Window ;
	struct ImGuiContext* ctx;
	double       g_Time ;
	bool         g_MousePressed[3] ;
	float        g_MouseWheel;
	unsigned int g_FontTexture;
	int          g_ShaderHandle, g_VertHandle, g_FragHandle;
	int          g_AttribLocationTex, g_AttribLocationProjMtx;
	int          g_AttribLocationPosition, g_AttribLocationUV, g_AttribLocationColor;
	unsigned int g_VboHandle, g_VaoHandle, g_ElementsHandle;
}ImGui_ImplGlfwGL3;

ImGui_ImplGlfwGL3* ImGui_ImplGlfwGL3_new();
void ImGui_ImplGlfwGL3_delete(ImGui_ImplGlfwGL3*);
bool        ImGui_ImplGlfwGL3_Init(ImGui_ImplGlfwGL3*,GLFWwindow* window, bool install_callbacks);
void        ImGui_ImplGlfwGL3_NewFrame(ImGui_ImplGlfwGL3*);
void        ImGui_ImplGlfwGL3_Render(ImGui_ImplGlfwGL3* impl);
// Use if you want to reset your rendering device without losing ImGui state.
void        ImGui_ImplGlfwGL3_InvalidateDeviceObjects(ImGui_ImplGlfwGL3*);
void 		ImGui_ImplGlfwGL3_Set(ImGui_ImplGlfwGL3*);
// bool        ImGui_ImplGlfwGL3_CreateDeviceObjects();

// GLFW callbacks (installed by default if you enable 'install_callbacks' during initialization)
// Provided here if you want to chain callbacks.
// You can also handle inputs yourself and use those as a reference.
 void        ImGui_ImplGlfwGL3_MouseButtonCallback(GLFWwindow* window, int button, int action, int mods);
 void        ImGui_ImplGlfwGL3_ScrollCallback(GLFWwindow* window, double xoffset, double yoffset);
 void        ImGui_ImplGlfwGL3_KeyCallback(GLFWwindow* window, int key, int scancode, int action, int mods);
 void        ImGui_ImplGlfwGL3_CharCallback(GLFWwindow* window, unsigned int c);
 
//addons
bool Knob(const char* label, float* value_p, float minv, float maxv);
int Bezier( const char *label, float P[4] );
bool Curve(const char *label, const struct ImVec2& size, struct ImVec2 *points, const int maxpoints, float *data, int datalen);
void CurveGetData(struct ImVec2 *points, const int maxpoints, float *data, int datalen);
 								

//experiments
struct ImVec2 igGetCursorScreenPosORIG();
struct ImVec2 igGetCursorScreenPosORIG2();

//ImVec2 GetCursorScreenPos();
]]

ffi.cdef[[
//Log
typedef struct Log Log;
Log* Log_new();
void Log_Add(Log* log,const char* fmt, ...);
void Log_Draw(Log* log, const char* title); //, bool* p_open = NULL
void Log_delete(Log* log);	

]]



if jit.os == "Windows" then
ffi.cdef[[
 
// Helpers: UTF-8 <> wchar
int           igImTextStrToUtf8(char* buf, int buf_size, const ImWchar* in_text, const ImWchar* in_text_end);      // return output UTF-8 bytes count 
int           igImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end);          // return input UTF-8 bytes count 
int           igImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_remaining);   // return input UTF-8 bytes count 
int           igImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end);                            // return number of UTF-8 code-points (NOT bytes count) 
int           igImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end);                   // return number of bytes to express string as UTF-8 code-points 
 
]]
end

--local lib = ffi.load[[C:\luaGL\gitsources\cimgui\buildcimgui2\libcimgui]]
--local lib = ffi.load[[C:\luaGL\gitsources\build_cimgui3\libcimgui]]
--lib = ffi.load[[C:\luaGL\gitsources\cimgui\builddebug\libcimguiMT]]
local lib = ffi.load[[C:\luaGL\gitsources\build_luajit-imgui_auto\libcimgui]]
--local lib = ffi.load[[libcimgui]]

local ImVec2 
ImVec2 = ffi.metatype("ImVec2",{
	__add = function(a,b) return ImVec2(a.x + b.x, a.y + b.y) end,
	__sub = function(a,b) return ImVec2(a.x - b.x, a.y - b.y) end,
	__unm = function(a) return ImVec2(-a.x,-a.y) end,
	__mul = function(a, b) --scalar mult
		if not ffi.istype(ImVec2, b) then
		return ImVec2(a.x * b, a.y * b) end
		return ImVec2(a * b.x, a * b.y)
	end,
	__tostring = function(v) return 'ImVec2<'..v.x..','..v.y..'>' end
})
sss = ImVec2(3,2)
local ImVec2_p = ffi.typeof("ImVec2[1]")
local ImVec4 = ffi.typeof("struct ImVec4")


-- hand written functions

local M = {ImVec2 = ImVec2, ImVec4 = ImVec4, lib = lib}
function M.Begin(name, p_open, flags)
	 return  lib.igBegin(name, p_open or nil,flags or 0);
end
function M.End()
	 return  lib.igEnd();
end
function M.Button(label, size)
	return lib.igButton(label, size or ImVec2(0, 0))
end

function M.CollapsingHeader(label,flags)
	return lib.igCollapsingHeader(label,flags or 0)
end

function M.GetCursorScreenPos()
	--local pos = ImVec2_p()
	return lib.igGetCursorScreenPos()--pos)
	--return pos[0]
end
function M.CalcItemRectClosestPoint(pos, on_edge, outward)
	if on_edge == nil then on_edge = false end
	local ret = ImVec2_p()
	lib.igCalcItemRectClosestPoint(ret, pos, on_edge, outward or 0);
	return ret[0]
end
function M.CalcTextSize(text, text_end, hide_text_after_double_hash, wrap_width)
	if hide_text_after_double_hash == nil then hide_text_after_double_hash = false end
	--local ret = ImVec2_p()
	--lib.igCalcTextSize(ret, text, text_end, hide_text_after_double_hash, wrap_width or -1)
	--return ret[0]
	return lib.igCalcTextSize( text, text_end, hide_text_after_double_hash, wrap_width or -1)
end
function M.GetMouseDragDelta(button , lock_threshold)
	local pos = ImVec2_p()
	lib.igGetMouseDragDelta(pos, button or 0, lock_threshold or -1)
	return pos[0]
end
function M.SameLine(pos_x, spacing_w)
	return lib.igSameLine(pos_x or 0.0, spacing_w or -1.0)
end
function M.SliderInt(label,v, v_min, v_max, display_format)
	return lib.igSliderInt(label,v, v_min, v_max, display_format or "%.0f")
end
function M.PlotLines(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride)
	lib.igPlotLinesFloatPtr(label, values, values_count, values_offset or 0, overlay_text, scale_min or M.FLT_MAX, scale_max or M.FLT_MAX, graph_size or ImVec2(0,0), stride or ffi.sizeof"float")
end
function M.GetContentRegionAvail()
	--local avail = ImVec2(0,0)
	return lib.igGetContentRegionAvail()--avail)
	--return avail
end

function M.SetNextWindowPos(pos,cond,pivot)
	return lib.igSetNextWindowPos(pos, cond or 0, pivot or ImVec2(0,0));
end

function M.IsItemHovered(flags)
	return lib.igIsItemHovered(flags or 0)
end
if jit.os == "Windows" then
	function M.ToUTF(unc_str)
		local buf_len = lib.igImTextCountUtf8BytesFromStr(unc_str, nil) + 1;
		local buf_local = ffi.new("char[?]",buf_len)
		lib.igImTextStrToUtf8(buf_local, buf_len, unc_str, nil);
		return buf_local
	end
	
	function M.FromUTF(utf_str)
		local wbuf_length = lib.igImTextCountCharsFromUtf8(utf_str, nil) + 1;
		local buf_local = ffi.new("ImWchar[?]",wbuf_length)
		lib.igImTextStrFromUtf8(buf_local, wbuf_length, utf_str, nil,nil);
		return buf_local
	end
end

M.FLT_MAX = lib.igGET_FLT_MAX()

----------- ImFontAtlas
local ImFontAtlas = {}
ImFontAtlas.__index = ImFontAtlas

function ImFontAtlas:AddFontDefault(font_cfg)
	return lib.ImFontAtlas_AddFontDefault(self, font_cfg)
end

function ImFontAtlas:AddFontFromFileTTF(filename, size_pixels, font_cfg, glyph_ranges)
	return lib.ImFontAtlas_AddFontFromFileTTF(self, filename, size_pixels, font_cfg, glyph_ranges);
end

function ImFontAtlas:GetTexDataAsRGBA32(out_pixels, out_width, out_height, out_bytes_per_pixel)
	lib.ImFontAtlas_GetTexDataAsRGBA32(self,out_pixels, out_width, out_height, out_bytes_per_pixel);
end

ffi.metatype("ImFontAtlas", ImFontAtlas)
------------ImFont
local ImFont = {}
ImFont.__index = ImFont

function ImFont:FindGlyph(codepoint)
	return lib.ImFont_FindGlyph(self, codepoint)
end

ffi.metatype("ImFont",ImFont)
----------ImFontConfig
local ImFontConfig = {}
ImFontConfig.__index = ImFontConfig
ImFontConfig.__new = function(tp)
	local ret = ffi.new(tp)
	lib.ImFontConfig_DefaultConstructor(ret)
	return ret
end
M.ImFontConfig = ffi.metatype("ImFontConfig",ImFontConfig)
-----------ImDrawList
local ImDrawList = {}
ImDrawList.__index = ImDrawList

function ImDrawList:AddLine(a, b, col,thickness)
	lib.ImDrawList_AddLine(self, a, b, col, thickness or 1)
end
function ImDrawList:AddRect(a,b,col,rounding,rounding_corners,thickness)
 return lib.ImDrawList_AddRect(self, a, b, col, rounding or 0, rounding_corners or 0, thickness or 1)
end

function ImDrawList:AddText(pos, col, text_begin, text_end)
	lib.ImDrawList_AddText(self, pos, col, text_begin, text_end)
end

function ImDrawList:AddCircleFilled(centre, radius, col, num_segments)
	lib.ImDrawList_AddCircleFilled(self, centre, radius, col, num_segments or 12)
end

function M.U32(a,b,c,d) return lib.igGetColorU32Vec(ImVec4(a,b,c,d or 1)) end

ffi.metatype("ImDrawList",ImDrawList)

-----------ImGui_ImplGlfwGL3
local ImGui_ImplGlfwGL3 = {}
ImGui_ImplGlfwGL3.__index = ImGui_ImplGlfwGL3

local gl3w_inited = false
function ImGui_ImplGlfwGL3.__new()
	if gl3w_inited == false then
		lib.Do_gl3wInit()
		gl3w_inited = true
	end
	local ptr = lib.ImGui_ImplGlfwGL3_new()
	ffi.gc(ptr,lib.ImGui_ImplGlfwGL3_delete)
	return ptr
end

function ImGui_ImplGlfwGL3:destroy()
	ffi.gc(self,nil) --prevent gc twice
	lib.ImGui_ImplGlfwGL3_delete(self)
end

function ImGui_ImplGlfwGL3:NewFrame()
	return lib.ImGui_ImplGlfwGL3_NewFrame(self)
end

function ImGui_ImplGlfwGL3:Render()
	return lib.ImGui_ImplGlfwGL3_Render(self)
end

function ImGui_ImplGlfwGL3:Init(window, install_callbacks)
	return lib.ImGui_ImplGlfwGL3_Init(self, window,install_callbacks);
end

M.ImplGlfwGL3 = ffi.metatype("ImGui_ImplGlfwGL3",ImGui_ImplGlfwGL3)
---------------------------------
local Log = {}
Log.__index = Log
function Log.__new()
	local ptr = lib.Log_new()
	ffi.gc(ptr,lib.Log_delete)
	return ptr
end
function Log:Add(fmt,...)
	lib.Log_Add(self,fmt,...)
end
function Log:Draw(title)
	title = title or "Log"
	lib.Log_Draw(self,title)
end
M.Log = ffi.metatype("Log",Log)
--------obsoletes
function M.GetItemsLineHeightWithSpacing() 
	return lib.igGetFrameHeightWithSpacing()
end
function M.PushIdStr(id) 
	return lib.igPushIDStr(id)
end
function M.PopId() 
	return lib.igPopID()
end
function M.ShowTestWindow(a)
	return lib.igShowDemoWindow(a)
end
function M.PushStyleColor(...)
	lib.igPushStyleColorVec4(...)
end
function M.PushStyleVar(...)
	return lib.igPushStyleVarFloat(...)
end
function M.BeginPopup(c,f)
	return lib.igBeginPopup(c,f or 0)
end
function M.Combo(...)
	return lib.igComboStr_arr(...)
end
function M.BeginChild(...)
	return lib.igBeginChildStr(...)
end
function M.Selectable(...)
	return lib.igSelectableBool(...)
end
----------- get ig.. functions without prefix
M = setmetatable(M,{
	__index = function(t,k) 
		local ok, obj = pcall(function(val) return lib[val] end, "ig"..k)
		if not ok then error("Couldn't find function "..k.." (are you accessing the right function?)",2) end
		rawset(M, k, obj)
		return obj
	end
})


return M