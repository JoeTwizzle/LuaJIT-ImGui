--[[ BEGIN AUTOGENERATED SEGMENT ]]
local cdecl = [[
	struct ImGuiIO;
	struct ImGuiStyle;
	struct ImDrawData;
	struct ImVec2;
	struct ImVec4;
	struct ImGuiTextEditCallbackData;
	struct ImGuiSizeCallbackData;
	struct ImDrawList;
	struct ImGuiStorage;
	struct ImFont;
	struct ImFontConfig;
	struct ImFontAtlas;
	struct ImDrawCmd;
	struct ImGuiListClipper;
	struct ImGuiTextFilter;
	struct ImGuiPayload;
	struct Glyph;
	typedef unsigned short ImDrawIdx;
	typedef unsigned int ImU32;
	typedef unsigned short ImWchar;
	typedef void *ImTextureID;
	typedef ImU32 ImGuiID;
	typedef int ImGuiCol;
	typedef int ImGuiStyleVar;
	typedef int ImGuiKey;
	typedef int ImGuiColorEditFlags;
	typedef int ImGuiMouseCursor;
	typedef int ImGuiWindowFlags;
	typedef int ImGuiCond;
	typedef int ImGuiColumnsFlags;
	typedef int ImGuiInputTextFlags;
	typedef int ImGuiSelectableFlags;
	typedef int ImGuiTreeNodeFlags;
	typedef int ImGuiHoveredFlags;
	typedef int ImGuiNavFlags;
	typedef int ImGuiComboFlags;
	typedef int ImGuiDragDropFlags;
	typedef int ImGuiFocusedFlags;
	typedef int ImDrawCornerFlags;
	typedef int ImDrawListFlags;
	typedef int (*ImGuiTextEditCallback)(struct ImGuiTextEditCallbackData *data);
	typedef void (*ImGuiSizeCallback)(struct ImGuiSizeCallbackData *data);
	typedef void (*ImDrawCallback)(const struct ImDrawList *parent_list, const struct ImDrawCmd *cmd);
	typedef unsigned long long ImU64;
	struct ImVec2
	{
	float x, y;
	};
	struct ImVec4
	{
	float x, y, z, w;
	};
	enum
	{
	ImGuiWindowFlags_NoTitleBar = 1 << 0,
	ImGuiWindowFlags_NoResize = 1 << 1,
	ImGuiWindowFlags_NoMove = 1 << 2,
	ImGuiWindowFlags_NoScrollbar = 1 << 3,
	ImGuiWindowFlags_NoScrollWithMouse = 1 << 4,
	ImGuiWindowFlags_NoCollapse = 1 << 5,
	ImGuiWindowFlags_AlwaysAutoResize = 1 << 6,
	ImGuiWindowFlags_NoSavedSettings = 1 << 8,
	ImGuiWindowFlags_NoInputs = 1 << 9,
	ImGuiWindowFlags_MenuBar = 1 << 10,
	ImGuiWindowFlags_HorizontalScrollbar = 1 << 11,
	ImGuiWindowFlags_NoFocusOnAppearing = 1 << 12,
	ImGuiWindowFlags_NoBringToFrontOnFocus = 1 << 13,
	ImGuiWindowFlags_AlwaysVerticalScrollbar = 1 << 14,
	ImGuiWindowFlags_AlwaysHorizontalScrollbar = 1 << 15,
	ImGuiWindowFlags_AlwaysUseWindowPadding = 1 << 16,
	ImGuiWindowFlags_ResizeFromAnySide = 1 << 17,
	};
	enum
	{
	ImGuiInputTextFlags_CharsDecimal = 1 << 0,
	ImGuiInputTextFlags_CharsHexadecimal = 1 << 1,
	ImGuiInputTextFlags_CharsUppercase = 1 << 2,
	ImGuiInputTextFlags_CharsNoBlank = 1 << 3,
	ImGuiInputTextFlags_AutoSelectAll = 1 << 4,
	ImGuiInputTextFlags_EnterReturnsTrue = 1 << 5,
	ImGuiInputTextFlags_CallbackCompletion = 1 << 6,
	ImGuiInputTextFlags_CallbackHistory = 1 << 7,
	ImGuiInputTextFlags_CallbackAlways = 1 << 8,
	ImGuiInputTextFlags_CallbackCharFilter = 1 << 9,
	ImGuiInputTextFlags_AllowTabInput = 1 << 10,
	ImGuiInputTextFlags_CtrlEnterForNewLine = 1 << 11,
	ImGuiInputTextFlags_NoHorizontalScroll = 1 << 12,
	ImGuiInputTextFlags_AlwaysInsertMode = 1 << 13,
	ImGuiInputTextFlags_ReadOnly = 1 << 14,
	ImGuiInputTextFlags_Password = 1 << 15,
	ImGuiInputTextFlags_NoUndoRedo = 1 << 16,
	};
	enum
	{
	ImGuiTreeNodeFlags_Selected = 1 << 0,
	ImGuiTreeNodeFlags_Framed = 1 << 1,
	ImGuiTreeNodeFlags_AllowItemOverlap = 1 << 2,
	ImGuiTreeNodeFlags_NoTreePushOnOpen = 1 << 3,
	ImGuiTreeNodeFlags_NoAutoOpenOnLog = 1 << 4,
	ImGuiTreeNodeFlags_DefaultOpen = 1 << 5,
	ImGuiTreeNodeFlags_OpenOnDoubleClick = 1 << 6,
	ImGuiTreeNodeFlags_OpenOnArrow = 1 << 7,
	ImGuiTreeNodeFlags_Leaf = 1 << 8,
	ImGuiTreeNodeFlags_Bullet = 1 << 9,
	ImGuiTreeNodeFlags_FramePadding = 1 << 10,
	ImGuiTreeNodeFlags_CollapsingHeader = ImGuiTreeNodeFlags_Framed | ImGuiTreeNodeFlags_NoAutoOpenOnLog
	};
	enum
	{
	ImGuiSelectableFlags_DontClosePopups = 1 << 0,
	ImGuiSelectableFlags_SpanAllColumns = 1 << 1,
	ImGuiSelectableFlags_AllowDoubleClick = 1 << 2
	};
	enum ImGuiComboFlags_
	{
	ImGuiComboFlags_PopupAlignLeft = 1 << 0,
	ImGuiComboFlags_HeightSmall = 1 << 1,
	ImGuiComboFlags_HeightRegular = 1 << 2,
	ImGuiComboFlags_HeightLarge = 1 << 3,
	ImGuiComboFlags_HeightLargest = 1 << 4,
	ImGuiComboFlags_HeightMask_ = ImGuiComboFlags_HeightSmall | ImGuiComboFlags_HeightRegular | ImGuiComboFlags_HeightLarge | ImGuiComboFlags_HeightLargest
	};
	enum ImGuiFocusedFlags_
	{
	ImGuiFocusedFlags_ChildWindows = 1 << 0,
	ImGuiFocusedFlags_RootWindow = 1 << 1,
	ImGuiFocusedFlags_RootAndChildWindows = ImGuiFocusedFlags_RootWindow | ImGuiFocusedFlags_ChildWindows
	};
	enum ImGuiHoveredFlags_
	{
	ImGuiHoveredFlags_ChildWindows = 1 << 0,
	ImGuiHoveredFlags_RootWindow = 1 << 1,
	ImGuiHoveredFlags_AllowWhenBlockedByPopup = 1 << 2,
	ImGuiHoveredFlags_AllowWhenBlockedByActiveItem = 1 << 4,
	ImGuiHoveredFlags_AllowWhenOverlapped = 1 << 5,
	ImGuiHoveredFlags_RectOnly = ImGuiHoveredFlags_AllowWhenBlockedByPopup | ImGuiHoveredFlags_AllowWhenBlockedByActiveItem | ImGuiHoveredFlags_AllowWhenOverlapped,
	ImGuiHoveredFlags_RootAndChildWindows = ImGuiHoveredFlags_RootWindow | ImGuiHoveredFlags_ChildWindows
	};
	enum ImGuiDragDropFlags_
	{
	ImGuiDragDropFlags_SourceNoPreviewTooltip = 1 << 0,
	ImGuiDragDropFlags_SourceNoDisableHover = 1 << 1,
	ImGuiDragDropFlags_SourceNoHoldToOpenOthers = 1 << 2,
	ImGuiDragDropFlags_SourceAllowNullID = 1 << 3,
	ImGuiDragDropFlags_SourceExtern = 1 << 4,
	ImGuiDragDropFlags_AcceptBeforeDelivery = 1 << 10,
	ImGuiDragDropFlags_AcceptNoDrawDefaultRect = 1 << 11,
	ImGuiDragDropFlags_AcceptPeekOnly = ImGuiDragDropFlags_AcceptBeforeDelivery | ImGuiDragDropFlags_AcceptNoDrawDefaultRect
	};
	enum
	{
	ImGuiKey_Tab,
	ImGuiKey_LeftArrow,
	ImGuiKey_RightArrow,
	ImGuiKey_UpArrow,
	ImGuiKey_DownArrow,
	ImGuiKey_PageUp,
	ImGuiKey_PageDown,
	ImGuiKey_Home,
	ImGuiKey_End,
	ImGuiKey_Delete,
	ImGuiKey_Backspace,
	ImGuiKey_Enter,
	ImGuiKey_Escape,
	ImGuiKey_A,
	ImGuiKey_C,
	ImGuiKey_V,
	ImGuiKey_X,
	ImGuiKey_Y,
	ImGuiKey_Z,
	ImGuiKey_COUNT
	};
	enum
	{
	ImGuiCol_Text,
	ImGuiCol_TextDisabled,
	ImGuiCol_WindowBg,
	ImGuiCol_ChildBg,
	ImGuiCol_PopupBg,
	ImGuiCol_Border,
	ImGuiCol_BorderShadow,
	ImGuiCol_FrameBg,
	ImGuiCol_FrameBgHovered,
	ImGuiCol_FrameBgActive,
	ImGuiCol_TitleBg,
	ImGuiCol_TitleBgActive,
	ImGuiCol_TitleBgCollapsed,
	ImGuiCol_MenuBarBg,
	ImGuiCol_ScrollbarBg,
	ImGuiCol_ScrollbarGrab,
	ImGuiCol_ScrollbarGrabHovered,
	ImGuiCol_ScrollbarGrabActive,
	ImGuiCol_CheckMark,
	ImGuiCol_SliderGrab,
	ImGuiCol_SliderGrabActive,
	ImGuiCol_Button,
	ImGuiCol_ButtonHovered,
	ImGuiCol_ButtonActive,
	ImGuiCol_Header,
	ImGuiCol_HeaderHovered,
	ImGuiCol_HeaderActive,
	ImGuiCol_Separator,
	ImGuiCol_SeparatorHovered,
	ImGuiCol_SeparatorActive,
	ImGuiCol_ResizeGrip,
	ImGuiCol_ResizeGripHovered,
	ImGuiCol_ResizeGripActive,
	ImGuiCol_CloseButton,
	ImGuiCol_CloseButtonHovered,
	ImGuiCol_CloseButtonActive,
	ImGuiCol_PlotLines,
	ImGuiCol_PlotLinesHovered,
	ImGuiCol_PlotHistogram,
	ImGuiCol_PlotHistogramHovered,
	ImGuiCol_TextSelectedBg,
	ImGuiCol_ModalWindowDarkening,
	ImGuiCol_DragDropTarget,
	ImGuiCol_COUNT
	};
	enum
	{
	ImGuiStyleVar_Alpha,
	ImGuiStyleVar_WindowPadding,
	ImGuiStyleVar_WindowRounding,
	ImGuiStyleVar_WindowBorderSize,
	ImGuiStyleVar_WindowMinSize,
	ImGuiStyleVar_ChildRounding,
	ImGuiStyleVar_ChildBorderSize,
	ImGuiStyleVar_PopupRounding,
	ImGuiStyleVar_PopupBorderSize,
	ImGuiStyleVar_FramePadding,
	ImGuiStyleVar_FrameRounding,
	ImGuiStyleVar_FrameBorderSize,
	ImGuiStyleVar_ItemSpacing,
	ImGuiStyleVar_ItemInnerSpacing,
	ImGuiStyleVar_IndentSpacing,
	ImGuiStyleVar_GrabMinSize,
	ImGuiStyleVar_ButtonTextAlign,
	ImGuiStyleVar_Count_
	};
	enum
	{
	ImGuiColorEditFlags_NoAlpha = 1 << 1,
	ImGuiColorEditFlags_NoPicker = 1 << 2,
	ImGuiColorEditFlags_NoOptions = 1 << 3,
	ImGuiColorEditFlags_NoSmallPreview = 1 << 4,
	ImGuiColorEditFlags_NoInputs = 1 << 5,
	ImGuiColorEditFlags_NoTooltip = 1 << 6,
	ImGuiColorEditFlags_NoLabel = 1 << 7,
	ImGuiColorEditFlags_NoSidePreview = 1 << 8,
	ImGuiColorEditFlags_AlphaBar = 1 << 9,
	ImGuiColorEditFlags_AlphaPreview = 1 << 10,
	ImGuiColorEditFlags_AlphaPreviewHalf = 1 << 11,
	ImGuiColorEditFlags_HDR = 1 << 12,
	ImGuiColorEditFlags_RGB = 1 << 13,
	ImGuiColorEditFlags_HSV = 1 << 14,
	ImGuiColorEditFlags_HEX = 1 << 15,
	ImGuiColorEditFlags_Uint8 = 1 << 16,
	ImGuiColorEditFlags_Float = 1 << 17,
	ImGuiColorEditFlags_PickerHueBar = 1 << 18,
	ImGuiColorEditFlags_PickerHueWheel = 1 << 19
	};
	enum
	{
	ImGuiMouseCursor_None = -1,
	ImGuiMouseCursor_Arrow = 0,
	ImGuiMouseCursor_TextInput,
	ImGuiMouseCursor_Move,
	ImGuiMouseCursor_ResizeNS,
	ImGuiMouseCursor_ResizeEW,
	ImGuiMouseCursor_ResizeNESW,
	ImGuiMouseCursor_ResizeNWSE,
	ImGuiMouseCursor_Count_
	};
	enum
	{
	ImGuiCond_Always = 1 << 0,
	ImGuiCond_Once = 1 << 1,
	ImGuiCond_FirstUseEver = 1 << 2,
	ImGuiCond_Appearing = 1 << 3
	};
	enum ImDrawCornerFlags_
	{
	ImDrawCornerFlags_TopLeft = 1 << 0,
	ImDrawCornerFlags_TopRight = 1 << 1,
	ImDrawCornerFlags_BotLeft = 1 << 2,
	ImDrawCornerFlags_BotRight = 1 << 3,
	ImDrawCornerFlags_Top = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_TopRight,
	ImDrawCornerFlags_Bot = ImDrawCornerFlags_BotLeft | ImDrawCornerFlags_BotRight,
	ImDrawCornerFlags_Left = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotLeft,
	ImDrawCornerFlags_Right = ImDrawCornerFlags_TopRight | ImDrawCornerFlags_BotRight,
	ImDrawCornerFlags_All = 0xF
	};
	enum ImDrawListFlags_
	{
	ImDrawListFlags_AntiAliasedLines = 1 << 0,
	ImDrawListFlags_AntiAliasedFill = 1 << 1
	};
	enum ImGuiNavInput_
	{
	ImGuiNavInput_Activate,
	ImGuiNavInput_Cancel,
	ImGuiNavInput_Input,
	ImGuiNavInput_Menu,
	ImGuiNavInput_DpadLeft,
	ImGuiNavInput_DpadRight,
	ImGuiNavInput_DpadUp,
	ImGuiNavInput_DpadDown,
	ImGuiNavInput_LStickLeft,
	ImGuiNavInput_LStickRight,
	ImGuiNavInput_LStickUp,
	ImGuiNavInput_LStickDown,
	ImGuiNavInput_FocusPrev,
	ImGuiNavInput_FocusNext,
	ImGuiNavInput_TweakSlow,
	ImGuiNavInput_TweakFast,
	ImGuiNavInput_KeyMenu_,
	ImGuiNavInput_KeyLeft_,
	ImGuiNavInput_KeyRight_,
	ImGuiNavInput_KeyUp_,
	ImGuiNavInput_KeyDown_,
	ImGuiNavInput_COUNT,
	ImGuiNavInput_InternalStart_ = ImGuiNavInput_KeyMenu_
	};
	enum ImGuiNavFlags_
	{
	ImGuiNavFlags_EnableKeyboard = 1 << 0,
	ImGuiNavFlags_EnableGamepad = 1 << 1,
	ImGuiNavFlags_MoveMouse = 1 << 2,
	ImGuiNavFlags_NoCaptureKeyboard = 1 << 3
	};
	struct ImGuiStyle
	{
	float Alpha;
	struct ImVec2 WindowPadding;
	float WindowRounding;
	float WindowBorderSize;
	struct ImVec2 WindowMinSize;
	struct ImVec2 WindowTitleAlign;
	float ChildRounding;
	float ChildBorderSize;
	float PopupRounding;
	float PopupBorderSize;
	struct ImVec2 FramePadding;
	float FrameRounding;
	float FrameBorderSize;
	struct ImVec2 ItemSpacing;
	struct ImVec2 ItemInnerSpacing;
	struct ImVec2 TouchExtraPadding;
	float IndentSpacing;
	float ColumnsMinSpacing;
	float ScrollbarSize;
	float ScrollbarRounding;
	float GrabMinSize;
	float GrabRounding;
	struct ImVec2 ButtonTextAlign;
	struct ImVec2 DisplayWindowPadding;
	struct ImVec2 DisplaySafeAreaPadding;
	_Bool AntiAliasedLines;
	_Bool AntiAliasedFill;
	float CurveTessellationTol;
	struct ImVec4 Colors[ImGuiCol_COUNT];
	};
	struct ImGuiIO
	{
	struct ImVec2 DisplaySize;
	float DeltaTime;
	ImGuiNavFlags NavFlags;
	float IniSavingRate;
	const char *IniFilename;
	const char *LogFilename;
	float MouseDoubleClickTime;
	float MouseDoubleClickMaxDist;
	float MouseDragThreshold;
	int KeyMap[ImGuiKey_COUNT];
	float KeyRepeatDelay;
	float KeyRepeatRate;
	void *UserData;
	struct ImFontAtlas *Fonts;
	float FontGlobalScale;
	_Bool FontAllowUserScaling;
	struct ImFont *FontDefault;
	struct ImVec2 DisplayFramebufferScale;
	struct ImVec2 DisplayVisibleMin;
	struct ImVec2 DisplayVisibleMax;
	_Bool OptMacOSXBehaviors;
	_Bool OptCursorBlink;
	const char *(*GetClipboardTextFn)(void *user_data);
	void (*SetClipboardTextFn)(void *user_data, const char *text);
	void *ClipboardUserData;
	void (*ImeSetInputScreenPosFn)(int x, int y);
	void *ImeWindowHandle;
	void (*RenderDrawListsFn)(ImDrawData* data);
	struct ImVec2 MousePos;
	_Bool MouseDown[5];
	float MouseWheel;
	float MouseWheelH;
	_Bool MouseDrawCursor;
	_Bool KeyCtrl;
	_Bool KeyShift;
	_Bool KeyAlt;
	_Bool KeySuper;
	_Bool KeysDown[512];
	ImWchar InputCharacters[16 + 1];
	float NavInputs[ImGuiNavInput_COUNT];
	_Bool WantCaptureMouse;
	_Bool WantCaptureKeyboard;
	_Bool WantTextInput;
	_Bool WantMoveMouse;
	_Bool NavActive;
	_Bool NavVisible;
	float Framerate;
	int MetricsRenderVertices;
	int MetricsRenderIndices;
	int MetricsActiveWindows;
	struct ImVec2 MouseDelta;
	struct ImVec2 MousePosPrev;
	struct ImVec2 MouseClickedPos[5];
	float MouseClickedTime[5];
	_Bool MouseClicked[5];
	_Bool MouseDoubleClicked[5];
	_Bool MouseReleased[5];
	_Bool MouseDownOwned[5];
	float MouseDownDuration[5];
	float MouseDownDurationPrev[5];
	struct ImVec2 MouseDragMaxDistanceAbs[5];
	float MouseDragMaxDistanceSqr[5];
	float KeysDownDuration[512];
	float KeysDownDurationPrev[512];
	float NavInputsDownDuration[ImGuiNavInput_COUNT];
	float NavInputsDownDurationPrev[ImGuiNavInput_COUNT];
	};
	struct ImGuiTextEditCallbackData
	{
	ImGuiInputTextFlags EventFlag;
	ImGuiInputTextFlags Flags;
	void *UserData;
	_Bool ReadOnly;
	ImWchar EventChar;
	ImGuiKey EventKey;
	char *Buf;
	int BufTextLen;
	int BufSize;
	_Bool BufDirty;
	int CursorPos;
	int SelectionStart;
	int SelectionEnd;
	};
	struct ImGuiSizeCallbackData
	{
	void *UserData;
	struct ImVec2 Pos;
	struct ImVec2 CurrentSize;
	struct ImVec2 DesiredSize;
	};
	struct ImDrawCmd
	{
	unsigned int ElemCount;
	struct ImVec4 ClipRect;
	ImTextureID TextureId;
	ImDrawCallback UserCallback;
	void *UserCallbackData;
	};
	struct ImDrawData
	{
	_Bool Valid;
	struct ImDrawList **CmdLists;
	int CmdListsCount;
	int TotalVtxCount;
	int TotalIdxCount;
	};
	struct ImDrawVert
	{
	struct ImVec2 pos;
	struct ImVec2 uv;
	ImU32 col;
	};
	struct ImFontConfig
	{
	void *FontData;
	int FontDataSize;
	_Bool FontDataOwnedByAtlas;
	int FontNo;
	float SizePixels;
	int OversampleH, OversampleV;
	_Bool PixelSnapH;
	struct ImVec2 GlyphExtraSpacing;
	struct ImVec2 GlyphOffset;
	const ImWchar *GlyphRanges;
	_Bool MergeMode;
	unsigned int RasterizerFlags;
	float RasterizerMultiply;
	char Name[32];
	struct ImFont *DstFont;
	};
	struct ImGuiListClipper
	{
	float StartPosY;
	float ItemsHeight;
	int ItemsCount, StepNo, DisplayStart, DisplayEnd;
	};
	struct ImGuiPayload
	{
	const void *Data;
	int DataSize;
	ImGuiID SourceId;
	ImGuiID SourceParentId;
	int DataFrameCount;
	char DataType[8 + 1];
	_Bool Preview;
	_Bool Delivery;
	};
	extern __attribute__((dllexport)) struct ImGuiIO *igGetIO();
	extern __attribute__((dllexport)) struct ImGuiStyle *igGetStyle();
	extern __attribute__((dllexport)) struct ImDrawData *igGetDrawData();
	extern __attribute__((dllexport)) void igNewFrame();
	extern __attribute__((dllexport)) void igRender();
	extern __attribute__((dllexport)) void igEndFrame();
	extern __attribute__((dllexport)) void igShowDemoWindow(_Bool *opened);
	extern __attribute__((dllexport)) void igShowMetricsWindow(_Bool *opened);
	extern __attribute__((dllexport)) void igShowStyleEditor(struct ImGuiStyle *ref);
	extern __attribute__((dllexport)) void igShowStyleSelector(const char *label);
	extern __attribute__((dllexport)) void igShowFontSelector(const char *label);
	extern __attribute__((dllexport)) void igShowUserGuide();
	extern __attribute__((dllexport)) _Bool igBegin(const char *name, _Bool *p_open, ImGuiWindowFlags flags);
	extern __attribute__((dllexport)) void igEnd();
	extern __attribute__((dllexport)) _Bool igBeginChild(const char *str_id, const struct ImVec2 size, _Bool border, ImGuiWindowFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igBeginChildEx(ImGuiID id, const struct ImVec2 size, _Bool border, ImGuiWindowFlags extra_flags);
	extern __attribute__((dllexport)) void igEndChild();
	extern __attribute__((dllexport)) void igGetContentRegionMax(struct ImVec2 *out);
	extern __attribute__((dllexport)) void igGetContentRegionAvail(struct ImVec2 *out);
	extern __attribute__((dllexport)) float igGetContentRegionAvailWidth();
	extern __attribute__((dllexport)) void igGetWindowContentRegionMin(struct ImVec2 *out);
	extern __attribute__((dllexport)) void igGetWindowContentRegionMax(struct ImVec2 *out);
	extern __attribute__((dllexport)) float igGetWindowContentRegionWidth();
	extern __attribute__((dllexport)) struct ImDrawList *igGetWindowDrawList();
	extern __attribute__((dllexport)) void igGetWindowPos(struct ImVec2 *out);
	extern __attribute__((dllexport)) void igGetWindowSize(struct ImVec2 *out);
	extern __attribute__((dllexport)) float igGetWindowWidth();
	extern __attribute__((dllexport)) float igGetWindowHeight();
	extern __attribute__((dllexport)) _Bool igIsWindowCollapsed();
	extern __attribute__((dllexport)) _Bool igIsWindowAppearing();
	extern __attribute__((dllexport)) void igSetWindowFontScale(float scale);
	extern __attribute__((dllexport)) void igSetNextWindowPos(const struct ImVec2 pos, ImGuiCond cond, const struct ImVec2 pivot);
	extern __attribute__((dllexport)) void igSetNextWindowSize(const struct ImVec2 size, ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetNextWindowSizeConstraints(const struct ImVec2 size_min, const struct ImVec2 size_max, ImGuiSizeCallback custom_callback, void *custom_callback_data);
	extern __attribute__((dllexport)) void igSetNextWindowContentSize(const struct ImVec2 size);
	extern __attribute__((dllexport)) void igSetNextWindowCollapsed(_Bool collapsed, ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetNextWindowFocus();
	extern __attribute__((dllexport)) void igSetWindowPos(const struct ImVec2 pos, ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetWindowSize(const struct ImVec2 size, ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetWindowCollapsed(_Bool collapsed, ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetWindowFocus();
	extern __attribute__((dllexport)) void igSetWindowPosByName(const char *name, const struct ImVec2 pos, ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetWindowSize2(const char *name, const struct ImVec2 size, ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetWindowCollapsed2(const char *name, _Bool collapsed, ImGuiCond cond);
	extern __attribute__((dllexport)) void igSetWindowFocus2(const char *name);
	extern __attribute__((dllexport)) float igGetScrollX();
	extern __attribute__((dllexport)) float igGetScrollY();
	extern __attribute__((dllexport)) float igGetScrollMaxX();
	extern __attribute__((dllexport)) float igGetScrollMaxY();
	extern __attribute__((dllexport)) void igSetScrollX(float scroll_x);
	extern __attribute__((dllexport)) void igSetScrollY(float scroll_y);
	extern __attribute__((dllexport)) void igSetScrollHere(float center_y_ratio);
	extern __attribute__((dllexport)) void igSetScrollFromPosY(float pos_y, float center_y_ratio);
	extern __attribute__((dllexport)) void igSetStateStorage(struct ImGuiStorage *tree);
	extern __attribute__((dllexport)) struct ImGuiStorage *igGetStateStorage();
	extern __attribute__((dllexport)) void igPushFont(struct ImFont *font);
	extern __attribute__((dllexport)) void igPopFont();
	extern __attribute__((dllexport)) void igPushStyleColorU32(ImGuiCol idx, ImU32 col);
	extern __attribute__((dllexport)) void igPushStyleColor(ImGuiCol idx, const struct ImVec4 col);
	extern __attribute__((dllexport)) void igPopStyleColor(int count);
	extern __attribute__((dllexport)) void igPushStyleVar(ImGuiStyleVar idx, float val);
	extern __attribute__((dllexport)) void igPushStyleVarVec(ImGuiStyleVar idx, const struct ImVec2 val);
	extern __attribute__((dllexport)) void igPopStyleVar(int count);
	extern __attribute__((dllexport)) void igGetStyleColorVec4(struct ImVec4 *pOut, ImGuiCol idx);
	extern __attribute__((dllexport)) struct ImFont *igGetFont();
	extern __attribute__((dllexport)) float igGetFontSize();
	extern __attribute__((dllexport)) void igGetFontTexUvWhitePixel(struct ImVec2 *pOut);
	extern __attribute__((dllexport)) ImU32 igGetColorU32(ImGuiCol idx, float alpha_mul);
	extern __attribute__((dllexport)) ImU32 igGetColorU32Vec(const struct ImVec4 *col);
	extern __attribute__((dllexport)) ImU32 igGetColorU32U32(ImU32 col);
	extern __attribute__((dllexport)) void igPushItemWidth(float item_width);
	extern __attribute__((dllexport)) void igPopItemWidth();
	extern __attribute__((dllexport)) float igCalcItemWidth();
	extern __attribute__((dllexport)) void igPushTextWrapPos(float wrap_pos_x);
	extern __attribute__((dllexport)) void igPopTextWrapPos();
	extern __attribute__((dllexport)) void igPushAllowKeyboardFocus(_Bool v);
	extern __attribute__((dllexport)) void igPopAllowKeyboardFocus();
	extern __attribute__((dllexport)) void igPushButtonRepeat(_Bool repeat);
	extern __attribute__((dllexport)) void igPopButtonRepeat();
	extern __attribute__((dllexport)) void igSeparator();
	extern __attribute__((dllexport)) void igSameLine(float pos_x, float spacing_w);
	extern __attribute__((dllexport)) void igNewLine();
	extern __attribute__((dllexport)) void igSpacing();
	extern __attribute__((dllexport)) void igDummy(const struct ImVec2 *size);
	extern __attribute__((dllexport)) void igIndent(float indent_w);
	extern __attribute__((dllexport)) void igUnindent(float indent_w);
	extern __attribute__((dllexport)) void igBeginGroup();
	extern __attribute__((dllexport)) void igEndGroup();
	extern __attribute__((dllexport)) void igGetCursorPos(struct ImVec2 *pOut);
	extern __attribute__((dllexport)) float igGetCursorPosX();
	extern __attribute__((dllexport)) float igGetCursorPosY();
	extern __attribute__((dllexport)) void igSetCursorPos(const struct ImVec2 local_pos);
	extern __attribute__((dllexport)) void igSetCursorPosX(float x);
	extern __attribute__((dllexport)) void igSetCursorPosY(float y);
	extern __attribute__((dllexport)) void igGetCursorStartPos(struct ImVec2 *pOut);
	extern __attribute__((dllexport)) void igGetCursorScreenPos(struct ImVec2 *pOut);
	extern __attribute__((dllexport)) void igSetCursorScreenPos(const struct ImVec2 pos);
	extern __attribute__((dllexport)) void igAlignTextToFramePadding();
	extern __attribute__((dllexport)) float igGetTextLineHeight();
	extern __attribute__((dllexport)) float igGetTextLineHeightWithSpacing();
	extern __attribute__((dllexport)) float igGetFrameHeight();
	extern __attribute__((dllexport)) float igGetFrameHeightWithSpacing();
	extern __attribute__((dllexport)) void igColumns(int count, const char *id, _Bool border);
	extern __attribute__((dllexport)) void igNextColumn();
	extern __attribute__((dllexport)) int igGetColumnIndex();
	extern __attribute__((dllexport)) float igGetColumnWidth(int column_index);
	extern __attribute__((dllexport)) void igSetColumnWidth(int column_index, float width);
	extern __attribute__((dllexport)) float igGetColumnOffset(int column_index);
	extern __attribute__((dllexport)) void igSetColumnOffset(int column_index, float offset_x);
	extern __attribute__((dllexport)) int igGetColumnsCount();
	extern __attribute__((dllexport)) void igPushIDStr(const char *str_id);
	extern __attribute__((dllexport)) void igPushIDStrRange(const char *str_begin, const char *str_end);
	extern __attribute__((dllexport)) void igPushIDPtr(const void *ptr_id);
	extern __attribute__((dllexport)) void igPushIDInt(int int_id);
	extern __attribute__((dllexport)) void igPopID();
	extern __attribute__((dllexport)) ImGuiID igGetIDStr(const char *str_id);
	extern __attribute__((dllexport)) ImGuiID igGetIDStrRange(const char *str_begin, const char *str_end);
	extern __attribute__((dllexport)) ImGuiID igGetIDPtr(const void *ptr_id);
	extern __attribute__((dllexport)) void igTextUnformatted(const char *text, const char *text_end);
	extern __attribute__((dllexport)) void igText(const char *fmt, ...);
	extern __attribute__((dllexport)) void igTextV(const char *fmt, va_list args);
	extern __attribute__((dllexport)) void igTextColored(const struct ImVec4 col, const char *fmt, ...);
	extern __attribute__((dllexport)) void igTextColoredV(const struct ImVec4 col, const char *fmt, va_list args);
	extern __attribute__((dllexport)) void igTextDisabled(const char *fmt, ...);
	extern __attribute__((dllexport)) void igTextDisabledV(const char *fmt, va_list args);
	extern __attribute__((dllexport)) void igTextWrapped(const char *fmt, ...);
	extern __attribute__((dllexport)) void igTextWrappedV(const char *fmt, va_list args);
	extern __attribute__((dllexport)) void igLabelText(const char *label, const char *fmt, ...);
	extern __attribute__((dllexport)) void igLabelTextV(const char *label, const char *fmt, va_list args);
	extern __attribute__((dllexport)) void igBulletText(const char *fmt, ...);
	extern __attribute__((dllexport)) void igBulletTextV(const char *fmt, va_list args);
	extern __attribute__((dllexport)) void igBullet();
	extern __attribute__((dllexport)) _Bool igButton(const char *label, const struct ImVec2 size);
	extern __attribute__((dllexport)) _Bool igSmallButton(const char *label);
	extern __attribute__((dllexport)) _Bool igInvisibleButton(const char *str_id, const struct ImVec2 size);
	extern __attribute__((dllexport)) void igImage(ImTextureID user_texture_id, const struct ImVec2 size, const struct ImVec2 uv0, const struct ImVec2 uv1, const struct ImVec4 tint_col, const struct ImVec4 border_col);
	extern __attribute__((dllexport)) _Bool igImageButton(ImTextureID user_texture_id, const struct ImVec2 size, const struct ImVec2 uv0, const struct ImVec2 uv1, int frame_padding, const struct ImVec4 bg_col, const struct ImVec4 tint_col);
	extern __attribute__((dllexport)) _Bool igCheckbox(const char *label, _Bool *v);
	extern __attribute__((dllexport)) _Bool igCheckboxFlags(const char *label, unsigned int *flags, unsigned int flags_value);
	extern __attribute__((dllexport)) _Bool igRadioButtonBool(const char *label, _Bool active);
	extern __attribute__((dllexport)) _Bool igRadioButton(const char *label, int *v, int v_button);
	extern __attribute__((dllexport)) void igPlotLines(const char *label, const float *values, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, struct ImVec2 graph_size, int stride);
	extern __attribute__((dllexport)) void igPlotLines2(const char *label, float (*values_getter)(void *data, int idx), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, struct ImVec2 graph_size);
	extern __attribute__((dllexport)) void igPlotHistogram(const char *label, const float *values, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, struct ImVec2 graph_size, int stride);
	extern __attribute__((dllexport)) void igPlotHistogram2(const char *label, float (*values_getter)(void *data, int idx), void *data, int values_count, int values_offset, const char *overlay_text, float scale_min, float scale_max, struct ImVec2 graph_size);
	extern __attribute__((dllexport)) void igProgressBar(float fraction, const struct ImVec2 *size_arg, const char *overlay);
	extern __attribute__((dllexport)) _Bool igBeginCombo(const char *label, const char *preview_value, ImGuiComboFlags flags);
	extern __attribute__((dllexport)) void igEndCombo();
	extern __attribute__((dllexport)) _Bool igCombo(const char *label, int *current_item, const char *const *items, int items_count, int popup_max_height_in_items);
	extern __attribute__((dllexport)) _Bool igCombo2(const char *label, int *current_item, const char *items_separated_by_zeros, int popup_max_height_in_items);
	extern __attribute__((dllexport)) _Bool igCombo3(const char *label, int *current_item, _Bool (*items_getter)(void *data, int idx, const char **out_text), void *data, int items_count, int popup_max_height_in_items);
	extern __attribute__((dllexport)) _Bool igDragFloat(const char *label, float *v, float v_speed, float v_min, float v_max, const char *display_format, float power);
	extern __attribute__((dllexport)) _Bool igDragFloat2(const char *label, float v[2], float v_speed, float v_min, float v_max, const char *display_format, float power);
	extern __attribute__((dllexport)) _Bool igDragFloat3(const char *label, float v[3], float v_speed, float v_min, float v_max, const char *display_format, float power);
	extern __attribute__((dllexport)) _Bool igDragFloat4(const char *label, float v[4], float v_speed, float v_min, float v_max, const char *display_format, float power);
	extern __attribute__((dllexport)) _Bool igDragFloatRange2(const char *label, float *v_current_min, float *v_current_max, float v_speed, float v_min, float v_max, const char *display_format, const char *display_format_max, float power);
	extern __attribute__((dllexport)) _Bool igDragInt(const char *label, int *v, float v_speed, int v_min, int v_max, const char *display_format);
	extern __attribute__((dllexport)) _Bool igDragInt2(const char *label, int v[2], float v_speed, int v_min, int v_max, const char *display_format);
	extern __attribute__((dllexport)) _Bool igDragInt3(const char *label, int v[3], float v_speed, int v_min, int v_max, const char *display_format);
	extern __attribute__((dllexport)) _Bool igDragInt4(const char *label, int v[4], float v_speed, int v_min, int v_max, const char *display_format);
	extern __attribute__((dllexport)) _Bool igDragIntRange2(const char *label, int *v_current_min, int *v_current_max, float v_speed, int v_min, int v_max, const char *display_format, const char *display_format_max);
	extern __attribute__((dllexport)) _Bool igInputText(const char *label, char *buf, size_t buf_size, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void *user_data);
	extern __attribute__((dllexport)) _Bool igInputTextMultiline(const char *label, char *buf, size_t buf_size, const struct ImVec2 size, ImGuiInputTextFlags flags, ImGuiTextEditCallback callback, void *user_data);
	extern __attribute__((dllexport)) _Bool igInputFloat(const char *label, float *v, float step, float step_fast, int decimal_precision, ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igInputFloat2(const char *label, float v[2], int decimal_precision, ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igInputFloat3(const char *label, float v[3], int decimal_precision, ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igInputFloat4(const char *label, float v[4], int decimal_precision, ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igInputInt(const char *label, int *v, int step, int step_fast, ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igInputInt2(const char *label, int v[2], ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igInputInt3(const char *label, int v[3], ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igInputInt4(const char *label, int v[4], ImGuiInputTextFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igSliderFloat(const char *label, float *v, float v_min, float v_max, const char *display_format, float power);
	extern __attribute__((dllexport)) _Bool igSliderFloat2(const char *label, float v[2], float v_min, float v_max, const char *display_format, float power);
	extern __attribute__((dllexport)) _Bool igSliderFloat3(const char *label, float v[3], float v_min, float v_max, const char *display_format, float power);
	extern __attribute__((dllexport)) _Bool igSliderFloat4(const char *label, float v[4], float v_min, float v_max, const char *display_format, float power);
	extern __attribute__((dllexport)) _Bool igSliderAngle(const char *label, float *v_rad, float v_degrees_min, float v_degrees_max);
	extern __attribute__((dllexport)) _Bool igSliderInt(const char *label, int *v, int v_min, int v_max, const char *display_format);
	extern __attribute__((dllexport)) _Bool igSliderInt2(const char *label, int v[2], int v_min, int v_max, const char *display_format);
	extern __attribute__((dllexport)) _Bool igSliderInt3(const char *label, int v[3], int v_min, int v_max, const char *display_format);
	extern __attribute__((dllexport)) _Bool igSliderInt4(const char *label, int v[4], int v_min, int v_max, const char *display_format);
	extern __attribute__((dllexport)) _Bool igVSliderFloat(const char *label, const struct ImVec2 size, float *v, float v_min, float v_max, const char *display_format, float power);
	extern __attribute__((dllexport)) _Bool igVSliderInt(const char *label, const struct ImVec2 size, int *v, int v_min, int v_max, const char *display_format);
	extern __attribute__((dllexport)) _Bool igColorEdit3(const char *label, float col[3], ImGuiColorEditFlags flags);
	extern __attribute__((dllexport)) _Bool igColorEdit4(const char *label, float col[4], ImGuiColorEditFlags flags);
	extern __attribute__((dllexport)) _Bool igColorPicker3(const char *label, float col[3], ImGuiColorEditFlags flags);
	extern __attribute__((dllexport)) _Bool igColorPicker4(const char *label, float col[4], ImGuiColorEditFlags flags, const float *ref_col);
	extern __attribute__((dllexport)) _Bool igColorButton(const char *desc_id, const struct ImVec4 col, ImGuiColorEditFlags flags, const struct ImVec2 size);
	extern __attribute__((dllexport)) void igSetColorEditOptions(ImGuiColorEditFlags flags);
	extern __attribute__((dllexport)) _Bool igTreeNode(const char *label);
	extern __attribute__((dllexport)) _Bool igTreeNodeStr(const char *str_id, const char *fmt, ...);
	extern __attribute__((dllexport)) _Bool igTreeNodePtr(const void *ptr_id, const char *fmt, ...);
	extern __attribute__((dllexport)) _Bool igTreeNodeStrV(const char *str_id, const char *fmt, va_list args);
	extern __attribute__((dllexport)) _Bool igTreeNodePtrV(const void *ptr_id, const char *fmt, va_list args);
	extern __attribute__((dllexport)) _Bool igTreeNodeEx(const char *label, ImGuiTreeNodeFlags flags);
	extern __attribute__((dllexport)) _Bool igTreeNodeExStr(const char *str_id, ImGuiTreeNodeFlags flags, const char *fmt, ...);
	extern __attribute__((dllexport)) _Bool igTreeNodeExPtr(const void *ptr_id, ImGuiTreeNodeFlags flags, const char *fmt, ...);
	extern __attribute__((dllexport)) _Bool igTreeNodeExV(const char *str_id, ImGuiTreeNodeFlags flags, const char *fmt, va_list args);
	extern __attribute__((dllexport)) _Bool igTreeNodeExVPtr(const void *ptr_id, ImGuiTreeNodeFlags flags, const char *fmt, va_list args);
	extern __attribute__((dllexport)) void igTreePushStr(const char *str_id);
	extern __attribute__((dllexport)) void igTreePushPtr(const void *ptr_id);
	extern __attribute__((dllexport)) void igTreePop();
	extern __attribute__((dllexport)) void igTreeAdvanceToLabelPos();
	extern __attribute__((dllexport)) float igGetTreeNodeToLabelSpacing();
	extern __attribute__((dllexport)) void igSetNextTreeNodeOpen(_Bool opened, ImGuiCond cond);
	extern __attribute__((dllexport)) _Bool igCollapsingHeader(const char *label, ImGuiTreeNodeFlags flags);
	extern __attribute__((dllexport)) _Bool igCollapsingHeaderEx(const char *label, _Bool *p_open, ImGuiTreeNodeFlags flags);
	extern __attribute__((dllexport)) _Bool igSelectable(const char *label, _Bool selected, ImGuiSelectableFlags flags, const struct ImVec2 size);
	extern __attribute__((dllexport)) _Bool igSelectableEx(const char *label, _Bool *p_selected, ImGuiSelectableFlags flags, const struct ImVec2 size);
	extern __attribute__((dllexport)) _Bool igListBox(const char *label, int *current_item, const char *const *items, int items_count, int height_in_items);
	extern __attribute__((dllexport)) _Bool igListBox2(const char *label, int *current_item, _Bool (*items_getter)(void *data, int idx, const char **out_text), void *data, int items_count, int height_in_items);
	extern __attribute__((dllexport)) _Bool igListBoxHeader(const char *label, const struct ImVec2 size);
	extern __attribute__((dllexport)) _Bool igListBoxHeader2(const char *label, int items_count, int height_in_items);
	extern __attribute__((dllexport)) void igListBoxFooter();
	extern __attribute__((dllexport)) void igValueBool(const char *prefix, _Bool b);
	extern __attribute__((dllexport)) void igValueInt(const char *prefix, int v);
	extern __attribute__((dllexport)) void igValueUInt(const char *prefix, unsigned int v);
	extern __attribute__((dllexport)) void igValueFloat(const char *prefix, float v, const char *float_format);
	extern __attribute__((dllexport)) void igSetTooltip(const char *fmt, ...);
	extern __attribute__((dllexport)) void igSetTooltipV(const char *fmt, va_list args);
	extern __attribute__((dllexport)) void igBeginTooltip();
	extern __attribute__((dllexport)) void igEndTooltip();
	extern __attribute__((dllexport)) _Bool igBeginMainMenuBar();
	extern __attribute__((dllexport)) void igEndMainMenuBar();
	extern __attribute__((dllexport)) _Bool igBeginMenuBar();
	extern __attribute__((dllexport)) void igEndMenuBar();
	extern __attribute__((dllexport)) _Bool igBeginMenu(const char *label, _Bool enabled);
	extern __attribute__((dllexport)) void igEndMenu();
	extern __attribute__((dllexport)) _Bool igMenuItem(const char *label, const char *shortcut, _Bool selected, _Bool enabled);
	extern __attribute__((dllexport)) _Bool igMenuItemPtr(const char *label, const char *shortcut, _Bool *p_selected, _Bool enabled);
	extern __attribute__((dllexport)) void igOpenPopup(const char *str_id);
	extern __attribute__((dllexport)) _Bool igOpenPopupOnItemClick(const char *str_id, int mouse_button);
	extern __attribute__((dllexport)) _Bool igBeginPopup(const char *str_id);
	extern __attribute__((dllexport)) _Bool igBeginPopupModal(const char *name, _Bool *p_open, ImGuiWindowFlags extra_flags);
	extern __attribute__((dllexport)) _Bool igBeginPopupContextItem(const char *str_id, int mouse_button);
	extern __attribute__((dllexport)) _Bool igBeginPopupContextWindow(const char *str_id, int mouse_button, _Bool also_over_items);
	extern __attribute__((dllexport)) _Bool igBeginPopupContextVoid(const char *str_id, int mouse_button);
	extern __attribute__((dllexport)) void igEndPopup();
	extern __attribute__((dllexport)) _Bool igIsPopupOpen(const char *str_id);
	extern __attribute__((dllexport)) void igCloseCurrentPopup();
	extern __attribute__((dllexport)) void igLogToTTY(int max_depth);
	extern __attribute__((dllexport)) void igLogToFile(int max_depth, const char *filename);
	extern __attribute__((dllexport)) void igLogToClipboard(int max_depth);
	extern __attribute__((dllexport)) void igLogFinish();
	extern __attribute__((dllexport)) void igLogButtons();
	extern __attribute__((dllexport)) void igLogText(const char *fmt, ...);
	extern __attribute__((dllexport)) _Bool igBeginDragDropSource(ImGuiDragDropFlags flags);
	extern __attribute__((dllexport)) _Bool igSetDragDropPayload(const char *type, const void *data, size_t size, ImGuiCond cond);
	extern __attribute__((dllexport)) void igEndDragDropSource();
	extern __attribute__((dllexport)) _Bool igBeginDragDropTarget();
	extern __attribute__((dllexport)) const struct ImGuiPayload *igAcceptDragDropPayload(const char *type, ImGuiDragDropFlags flags);
	extern __attribute__((dllexport)) void igEndDragDropTarget();
	extern __attribute__((dllexport)) void igPushClipRect(const struct ImVec2 clip_rect_min, const struct ImVec2 clip_rect_max, _Bool intersect_with_current_clip_rect);
	extern __attribute__((dllexport)) void igPopClipRect();
	extern __attribute__((dllexport)) void igStyleColorsClassic(struct ImGuiStyle *dst);
	extern __attribute__((dllexport)) void igStyleColorsDark(struct ImGuiStyle *dst);
	extern __attribute__((dllexport)) void igStyleColorsLight(struct ImGuiStyle *dst);
	extern __attribute__((dllexport)) void igSetItemDefaultFocus();
	extern __attribute__((dllexport)) void igSetKeyboardFocusHere(int offset);
	extern __attribute__((dllexport)) _Bool igIsItemHovered(ImGuiHoveredFlags flags);
	extern __attribute__((dllexport)) _Bool igIsItemActive();
	extern __attribute__((dllexport)) _Bool igIsItemClicked(int mouse_button);
	extern __attribute__((dllexport)) _Bool igIsItemVisible();
	extern __attribute__((dllexport)) _Bool igIsAnyItemHovered();
	extern __attribute__((dllexport)) _Bool igIsAnyItemActive();
	extern __attribute__((dllexport)) void igGetItemRectMin(struct ImVec2 *pOut);
	extern __attribute__((dllexport)) void igGetItemRectMax(struct ImVec2 *pOut);
	extern __attribute__((dllexport)) void igGetItemRectSize(struct ImVec2 *pOut);
	extern __attribute__((dllexport)) void igSetItemAllowOverlap();
	extern __attribute__((dllexport)) _Bool igIsWindowFocused(ImGuiFocusedFlags flags);
	extern __attribute__((dllexport)) _Bool igIsWindowHovered(ImGuiHoveredFlags falgs);
	extern __attribute__((dllexport)) _Bool igIsAnyWindowFocused();
	extern __attribute__((dllexport)) _Bool igIsAnyWindowHovered();
	extern __attribute__((dllexport)) _Bool igIsRectVisible(const struct ImVec2 item_size);
	extern __attribute__((dllexport)) _Bool igIsRectVisible2(const struct ImVec2 *rect_min, const struct ImVec2 *rect_max);
	extern __attribute__((dllexport)) float igGetTime();
	extern __attribute__((dllexport)) int igGetFrameCount();
	extern __attribute__((dllexport)) struct ImDrawList *igGetOverlayDrawList();
	extern __attribute__((dllexport)) struct ImDrawListSharedData *igGetDrawListSharedData();
	extern __attribute__((dllexport)) const char *igGetStyleColorName(ImGuiCol idx);
	extern __attribute__((dllexport)) void igCalcItemRectClosestPoint(struct ImVec2 *pOut, const struct ImVec2 pos, _Bool on_edge, float outward);
	extern __attribute__((dllexport)) void igCalcTextSize(struct ImVec2 *pOut, const char *text, const char *text_end, _Bool hide_text_after_double_hash, float wrap_width);
	extern __attribute__((dllexport)) void igCalcListClipping(int items_count, float items_height, int *out_items_display_start, int *out_items_display_end);
	extern __attribute__((dllexport)) _Bool igBeginChildFrame(ImGuiID id, const struct ImVec2 size, ImGuiWindowFlags extra_flags);
	extern __attribute__((dllexport)) void igEndChildFrame();
	extern __attribute__((dllexport)) void igColorConvertU32ToFloat4(struct ImVec4 *pOut, ImU32 in);
	extern __attribute__((dllexport)) ImU32 igColorConvertFloat4ToU32(const struct ImVec4 in);
	extern __attribute__((dllexport)) void igColorConvertRGBtoHSV(float r, float g, float b, float *out_h, float *out_s, float *out_v);
	extern __attribute__((dllexport)) void igColorConvertHSVtoRGB(float h, float s, float v, float *out_r, float *out_g, float *out_b);
	extern __attribute__((dllexport)) int igGetKeyIndex(ImGuiKey imgui_key);
	extern __attribute__((dllexport)) _Bool igIsKeyDown(int user_key_index);
	extern __attribute__((dllexport)) _Bool igIsKeyPressed(int user_key_index, _Bool repeat);
	extern __attribute__((dllexport)) _Bool igIsKeyReleased(int user_key_index);
	extern __attribute__((dllexport)) int igGetKeyPressedAmount(int key_index, float repeat_delay, float rate);
	extern __attribute__((dllexport)) _Bool igIsMouseDown(int button);
	extern __attribute__((dllexport)) _Bool igIsMouseClicked(int button, _Bool repeat);
	extern __attribute__((dllexport)) _Bool igIsMouseDoubleClicked(int button);
	extern __attribute__((dllexport)) _Bool igIsMouseReleased(int button);
	extern __attribute__((dllexport)) _Bool igIsMouseDragging(int button, float lock_threshold);
	extern __attribute__((dllexport)) _Bool igIsMouseHoveringRect(const struct ImVec2 r_min, const struct ImVec2 r_max, _Bool clip);
	extern __attribute__((dllexport)) _Bool igIsMousePosValid(const struct ImVec2 *mouse_pos);
	;
	extern __attribute__((dllexport)) void igGetMousePos(struct ImVec2 *pOut);
	extern __attribute__((dllexport)) void igGetMousePosOnOpeningCurrentPopup(struct ImVec2 *pOut);
	extern __attribute__((dllexport)) void igGetMouseDragDelta(struct ImVec2 *pOut, int button, float lock_threshold);
	extern __attribute__((dllexport)) void igResetMouseDragDelta(int button);
	extern __attribute__((dllexport)) ImGuiMouseCursor igGetMouseCursor();
	extern __attribute__((dllexport)) void igSetMouseCursor(ImGuiMouseCursor type);
	extern __attribute__((dllexport)) void igCaptureKeyboardFromApp(_Bool capture);
	extern __attribute__((dllexport)) void igCaptureMouseFromApp(_Bool capture);
	extern __attribute__((dllexport)) void *igMemAlloc(size_t sz);
	extern __attribute__((dllexport)) void igMemFree(void *ptr);
	extern __attribute__((dllexport)) const char *igGetClipboardText();
	extern __attribute__((dllexport)) void igSetClipboardText(const char *text);
	extern __attribute__((dllexport)) const char *igGetVersion();
	extern __attribute__((dllexport)) struct ImGuiContext *igCreateContext(struct ImFontAtlas* shared_font_atlas);
	extern __attribute__((dllexport)) void igDestroyContext(struct ImGuiContext *ctx);
	extern __attribute__((dllexport)) struct ImGuiContext *igGetCurrentContext();
	extern __attribute__((dllexport)) void igSetCurrentContext(struct ImGuiContext *ctx);
	extern __attribute__((dllexport)) void ImFontConfig_DefaultConstructor(struct ImFontConfig *config);
	extern __attribute__((dllexport)) void ImGuiIO_AddInputCharacter(unsigned short c);
	extern __attribute__((dllexport)) void ImGuiIO_AddInputCharactersUTF8(const char *utf8_chars);
	extern __attribute__((dllexport)) void ImGuiIO_ClearInputCharacters();
	extern __attribute__((dllexport)) struct ImGuiTextFilter *ImGuiTextFilter_Create(const char *default_filter);
	extern __attribute__((dllexport)) void ImGuiTextFilter_Destroy(struct ImGuiTextFilter *filter);
	extern __attribute__((dllexport)) void ImGuiTextFilter_Clear(struct ImGuiTextFilter *filter);
	extern __attribute__((dllexport)) _Bool ImGuiTextFilter_Draw(struct ImGuiTextFilter *filter, const char *label, float width);
	extern __attribute__((dllexport)) _Bool ImGuiTextFilter_PassFilter(const struct ImGuiTextFilter *filter, const char *text, const char *text_end);
	extern __attribute__((dllexport)) _Bool ImGuiTextFilter_IsActive(const struct ImGuiTextFilter *filter);
	extern __attribute__((dllexport)) void ImGuiTextFilter_Build(struct ImGuiTextFilter *filter);
	extern __attribute__((dllexport)) const char *ImGuiTextFilter_GetInputBuf(struct ImGuiTextFilter *filter);
	extern __attribute__((dllexport)) struct ImGuiTextBuffer *ImGuiTextBuffer_Create();
	extern __attribute__((dllexport)) void ImGuiTextBuffer_Destroy(struct ImGuiTextBuffer *buffer);
	extern __attribute__((dllexport)) char ImGuiTextBuffer_index(struct ImGuiTextBuffer *buffer, int i);
	extern __attribute__((dllexport)) const char *ImGuiTextBuffer_begin(const struct ImGuiTextBuffer *buffer);
	extern __attribute__((dllexport)) const char *ImGuiTextBuffer_end(const struct ImGuiTextBuffer *buffer);
	extern __attribute__((dllexport)) int ImGuiTextBuffer_size(const struct ImGuiTextBuffer *buffer);
	extern __attribute__((dllexport)) _Bool ImGuiTextBuffer_empty(struct ImGuiTextBuffer *buffer);
	extern __attribute__((dllexport)) void ImGuiTextBuffer_clear(struct ImGuiTextBuffer *buffer);
	extern __attribute__((dllexport)) const char *ImGuiTextBuffer_c_str(const struct ImGuiTextBuffer *buffer);
	extern __attribute__((dllexport)) void ImGuiTextBuffer_appendf(struct ImGuiTextBuffer *buffer, const char *fmt, ...);
	extern __attribute__((dllexport)) void ImGuiTextBuffer_appendfv(struct ImGuiTextBuffer *buffer, const char *fmt, va_list args);
	extern __attribute__((dllexport)) struct ImGuiStorage *ImGuiStorage_Create();
	extern __attribute__((dllexport)) void ImGuiStorage_Destroy(struct ImGuiStorage *storage);
	extern __attribute__((dllexport)) int ImGuiStorage_GetInt(struct ImGuiStorage *storage, ImGuiID key, int default_val);
	extern __attribute__((dllexport)) void ImGuiStorage_SetInt(struct ImGuiStorage *storage, ImGuiID key, int val);
	extern __attribute__((dllexport)) _Bool ImGuiStorage_GetBool(struct ImGuiStorage *storage, ImGuiID key, _Bool default_val);
	extern __attribute__((dllexport)) void ImGuiStorage_SetBool(struct ImGuiStorage *storage, ImGuiID key, _Bool val);
	extern __attribute__((dllexport)) float ImGuiStorage_GetFloat(struct ImGuiStorage *storage, ImGuiID key, float default_val);
	extern __attribute__((dllexport)) void ImGuiStorage_SetFloat(struct ImGuiStorage *storage, ImGuiID key, float val);
	extern __attribute__((dllexport)) void *ImGuiStorage_GetVoidPtr(struct ImGuiStorage *storage, ImGuiID key);
	extern __attribute__((dllexport)) void ImGuiStorage_SetVoidPtr(struct ImGuiStorage *storage, ImGuiID key, void *val);
	extern __attribute__((dllexport)) int *ImGuiStorage_GetIntRef(struct ImGuiStorage *storage, ImGuiID key, int default_val);
	extern __attribute__((dllexport)) _Bool *ImGuiStorage_GetBoolRef(struct ImGuiStorage *storage, ImGuiID key, _Bool default_val);
	extern __attribute__((dllexport)) float *ImGuiStorage_GetFloatRef(struct ImGuiStorage *storage, ImGuiID key, float default_val);
	extern __attribute__((dllexport)) void **ImGuiStorage_GetVoidPtrRef(struct ImGuiStorage *storage, ImGuiID key, void *default_val);
	extern __attribute__((dllexport)) void ImGuiStorage_SetAllInt(struct ImGuiStorage *storage, int val);
	extern __attribute__((dllexport)) void ImGuiTextEditCallbackData_DeleteChars(struct ImGuiTextEditCallbackData *data, int pos, int bytes_count);
	extern __attribute__((dllexport)) void ImGuiTextEditCallbackData_InsertChars(struct ImGuiTextEditCallbackData *data, int pos, const char *text, const char *text_end);
	extern __attribute__((dllexport)) _Bool ImGuiTextEditCallbackData_HasSelection(struct ImGuiTextEditCallbackData *data);
	extern __attribute__((dllexport)) _Bool ImGuiListClipper_Step(struct ImGuiListClipper *clipper);
	extern __attribute__((dllexport)) void ImGuiListClipper_Begin(struct ImGuiListClipper *clipper, int count, float items_height);
	extern __attribute__((dllexport)) void ImGuiListClipper_End(struct ImGuiListClipper *clipper);
	extern __attribute__((dllexport)) int ImGuiListClipper_GetDisplayStart(struct ImGuiListClipper *clipper);
	extern __attribute__((dllexport)) int ImGuiListClipper_GetDisplayEnd(struct ImGuiListClipper *clipper);
	extern __attribute__((dllexport)) int ImDrawList_GetVertexBufferSize(struct ImDrawList *list);
	extern __attribute__((dllexport)) struct ImDrawVert *ImDrawList_GetVertexPtr(struct ImDrawList *list, int n);
	extern __attribute__((dllexport)) int ImDrawList_GetIndexBufferSize(struct ImDrawList *list);
	extern __attribute__((dllexport)) ImDrawIdx *ImDrawList_GetIndexPtr(struct ImDrawList *list, int n);
	extern __attribute__((dllexport)) int ImDrawList_GetCmdSize(struct ImDrawList *list);
	extern __attribute__((dllexport)) struct ImDrawCmd *ImDrawList_GetCmdPtr(struct ImDrawList *list, int n);
	extern __attribute__((dllexport)) void ImDrawList_Clear(struct ImDrawList *list);
	extern __attribute__((dllexport)) void ImDrawList_ClearFreeMemory(struct ImDrawList *list);
	extern __attribute__((dllexport)) void ImDrawList_PushClipRect(struct ImDrawList *list, struct ImVec2 clip_rect_min, struct ImVec2 clip_rect_max, _Bool intersect_with_current_clip_rect);
	extern __attribute__((dllexport)) void ImDrawList_PushClipRectFullScreen(struct ImDrawList *list);
	extern __attribute__((dllexport)) void ImDrawList_PopClipRect(struct ImDrawList *list);
	extern __attribute__((dllexport)) void ImDrawList_PushTextureID(struct ImDrawList *list, const ImTextureID texture_id);
	extern __attribute__((dllexport)) void ImDrawList_PopTextureID(struct ImDrawList *list);
	extern __attribute__((dllexport)) void ImDrawList_GetClipRectMin(struct ImVec2 *pOut, struct ImDrawList *list);
	extern __attribute__((dllexport)) void ImDrawList_GetClipRectMax(struct ImVec2 *pOut, struct ImDrawList *list);
	extern __attribute__((dllexport)) void ImDrawList_AddLine(struct ImDrawList *list, const struct ImVec2 a, const struct ImVec2 b, ImU32 col, float thickness);
	extern __attribute__((dllexport)) void ImDrawList_AddRect(struct ImDrawList *list, const struct ImVec2 a, const struct ImVec2 b, ImU32 col, float rounding, int rounding_corners_flags, float thickness);
	extern __attribute__((dllexport)) void ImDrawList_AddRectFilled(struct ImDrawList *list, const struct ImVec2 a, const struct ImVec2 b, ImU32 col, float rounding, int rounding_corners_flags);
	extern __attribute__((dllexport)) void ImDrawList_AddRectFilledMultiColor(struct ImDrawList *list, const struct ImVec2 a, const struct ImVec2 b, ImU32 col_upr_left, ImU32 col_upr_right, ImU32 col_bot_right, ImU32 col_bot_left);
	extern __attribute__((dllexport)) void ImDrawList_AddQuad(struct ImDrawList *list, const struct ImVec2 a, const struct ImVec2 b, const struct ImVec2 c, const struct ImVec2 d, ImU32 col, float thickness);
	extern __attribute__((dllexport)) void ImDrawList_AddQuadFilled(struct ImDrawList *list, const struct ImVec2 a, const struct ImVec2 b, const struct ImVec2 c, const struct ImVec2 d, ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_AddTriangle(struct ImDrawList *list, const struct ImVec2 a, const struct ImVec2 b, const struct ImVec2 c, ImU32 col, float thickness);
	extern __attribute__((dllexport)) void ImDrawList_AddTriangleFilled(struct ImDrawList *list, const struct ImVec2 a, const struct ImVec2 b, const struct ImVec2 c, ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_AddCircle(struct ImDrawList *list, const struct ImVec2 centre, float radius, ImU32 col, int num_segments, float thickness);
	extern __attribute__((dllexport)) void ImDrawList_AddCircleFilled(struct ImDrawList *list, const struct ImVec2 centre, float radius, ImU32 col, int num_segments);
	extern __attribute__((dllexport)) void ImDrawList_AddText(struct ImDrawList *list, const struct ImVec2 pos, ImU32 col, const char *text_begin, const char *text_end);
	extern __attribute__((dllexport)) void ImDrawList_AddTextExt(struct ImDrawList *list, const struct ImFont *font, float font_size, const struct ImVec2 pos, ImU32 col, const char *text_begin, const char *text_end, float wrap_width, const struct ImVec4 *cpu_fine_clip_rect);
	extern __attribute__((dllexport)) void ImDrawList_AddImage(struct ImDrawList *list, ImTextureID user_texture_id, const struct ImVec2 a, const struct ImVec2 b, const struct ImVec2 uv_a, const struct ImVec2 uv_b, ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_AddImageQuad(struct ImDrawList *list, ImTextureID user_texture_id, const struct ImVec2 a, const struct ImVec2 b, const struct ImVec2 c, const struct ImVec2 d, const struct ImVec2 uv_a, const struct ImVec2 uv_b, const struct ImVec2 uv_c, const struct ImVec2 uv_d, ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_AddImageRounded(struct ImDrawList *list, ImTextureID user_texture_id, const struct ImVec2 a, const struct ImVec2 b, const struct ImVec2 uv_a, const struct ImVec2 uv_b, ImU32 col, float rounding, int rounding_corners);
	extern __attribute__((dllexport)) void ImDrawList_AddPolyline(struct ImDrawList *list, const struct ImVec2 *points, const int num_points, ImU32 col, _Bool closed, float thickness);
	extern __attribute__((dllexport)) void ImDrawList_AddConvexPolyFilled(struct ImDrawList *list, const struct ImVec2 *points, const int num_points, ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_AddBezierCurve(struct ImDrawList *list, const struct ImVec2 pos0, const struct ImVec2 cp0, const struct ImVec2 cp1, const struct ImVec2 pos1, ImU32 col, float thickness, int num_segments);
	extern __attribute__((dllexport)) void ImDrawList_PathClear(struct ImDrawList *list);
	extern __attribute__((dllexport)) void ImDrawList_PathLineTo(struct ImDrawList *list, const struct ImVec2 pos);
	extern __attribute__((dllexport)) void ImDrawList_PathLineToMergeDuplicate(struct ImDrawList *list, const struct ImVec2 pos);
	extern __attribute__((dllexport)) void ImDrawList_PathFillConvex(struct ImDrawList *list, ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_PathStroke(struct ImDrawList *list, ImU32 col, _Bool closed, float thickness);
	extern __attribute__((dllexport)) void ImDrawList_PathArcTo(struct ImDrawList *list, const struct ImVec2 centre, float radius, float a_min, float a_max, int num_segments);
	extern __attribute__((dllexport)) void ImDrawList_PathArcToFast(struct ImDrawList *list, const struct ImVec2 centre, float radius, int a_min_of_12, int a_max_of_12);
	extern __attribute__((dllexport)) void ImDrawList_PathBezierCurveTo(struct ImDrawList *list, const struct ImVec2 p1, const struct ImVec2 p2, const struct ImVec2 p3, int num_segments);
	extern __attribute__((dllexport)) void ImDrawList_PathRect(struct ImDrawList *list, const struct ImVec2 rect_min, const struct ImVec2 rect_max, float rounding, int rounding_corners_flags);
	extern __attribute__((dllexport)) void ImDrawList_ChannelsSplit(struct ImDrawList *list, int channels_count);
	extern __attribute__((dllexport)) void ImDrawList_ChannelsMerge(struct ImDrawList *list);
	extern __attribute__((dllexport)) void ImDrawList_ChannelsSetCurrent(struct ImDrawList *list, int channel_index);
	extern __attribute__((dllexport)) void ImDrawList_AddCallback(struct ImDrawList *list, ImDrawCallback callback, void *callback_data);
	extern __attribute__((dllexport)) void ImDrawList_AddDrawCmd(struct ImDrawList *list);
	extern __attribute__((dllexport)) void ImDrawList_PrimReserve(struct ImDrawList *list, int idx_count, int vtx_count);
	extern __attribute__((dllexport)) void ImDrawList_PrimRect(struct ImDrawList *list, const struct ImVec2 a, const struct ImVec2 b, ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_PrimRectUV(struct ImDrawList *list, const struct ImVec2 a, const struct ImVec2 b, const struct ImVec2 uv_a, const struct ImVec2 uv_b, ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_PrimQuadUV(struct ImDrawList *list, const struct ImVec2 a, const struct ImVec2 b, const struct ImVec2 c, const struct ImVec2 d, const struct ImVec2 uv_a, const struct ImVec2 uv_b, const struct ImVec2 uv_c, const struct ImVec2 uv_d, ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_PrimWriteVtx(struct ImDrawList *list, const struct ImVec2 pos, const struct ImVec2 uv, ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_PrimWriteIdx(struct ImDrawList *list, ImDrawIdx idx);
	extern __attribute__((dllexport)) void ImDrawList_PrimVtx(struct ImDrawList *list, const struct ImVec2 pos, const struct ImVec2 uv, ImU32 col);
	extern __attribute__((dllexport)) void ImDrawList_UpdateClipRect(struct ImDrawList *list);
	extern __attribute__((dllexport)) void ImDrawList_UpdateTextureID(struct ImDrawList *list);
	extern __attribute__((dllexport)) void ImDrawData_DeIndexAllBuffers(struct ImDrawData *drawData);
	extern __attribute__((dllexport)) void ImDrawData_ScaleClipRects(struct ImDrawData *drawData, const struct ImVec2 sc);
	extern __attribute__((dllexport)) void ImFontAtlas_GetTexDataAsRGBA32(struct ImFontAtlas *atlas, unsigned char **out_pixels, int *out_width, int *out_height, int *out_bytes_per_pixel);
	extern __attribute__((dllexport)) void ImFontAtlas_GetTexDataAsAlpha8(struct ImFontAtlas *atlas, unsigned char **out_pixels, int *out_width, int *out_height, int *out_bytes_per_pixel);
	extern __attribute__((dllexport)) void ImFontAtlas_SetTexID(struct ImFontAtlas *atlas, ImTextureID id);
	extern __attribute__((dllexport)) struct ImFont *ImFontAtlas_AddFont(struct ImFontAtlas *atlas, const struct ImFontConfig *font_cfg);
	extern __attribute__((dllexport)) struct ImFont *ImFontAtlas_AddFontDefault(struct ImFontAtlas *atlas, const struct ImFontConfig *font_cfg);
	extern __attribute__((dllexport)) struct ImFont *ImFontAtlas_AddFontFromFileTTF(struct ImFontAtlas *atlas, const char *filename, float size_pixels, const struct ImFontConfig *font_cfg, const ImWchar *glyph_ranges);
	extern __attribute__((dllexport)) struct ImFont *ImFontAtlas_AddFontFromMemoryTTF(struct ImFontAtlas *atlas, void *font_data, int font_size, float size_pixels, const struct ImFontConfig *font_cfg, const ImWchar *glyph_ranges);
	extern __attribute__((dllexport)) struct ImFont *ImFontAtlas_AddFontFromMemoryCompressedTTF(struct ImFontAtlas *atlas, const void *compressed_font_data, int compressed_font_size, float size_pixels, const struct ImFontConfig *font_cfg, const ImWchar *glyph_ranges);
	extern __attribute__((dllexport)) struct ImFont *ImFontAtlas_AddFontFromMemoryCompressedBase85TTF(struct ImFontAtlas *atlas, const char *compressed_font_data_base85, float size_pixels, const struct ImFontConfig *font_cfg, const ImWchar *glyph_ranges);
	extern __attribute__((dllexport)) void ImFontAtlas_ClearTexData(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) void ImFontAtlas_Clear(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) const ImWchar *ImFontAtlas_GetGlyphRangesDefault(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) const ImWchar *ImFontAtlas_GetGlyphRangesKorean(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) const ImWchar *ImFontAtlas_GetGlyphRangesJapanese(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) const ImWchar *ImFontAtlas_GetGlyphRangesChinese(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) const ImWchar *ImFontAtlas_GetGlyphRangesCyrillic(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) const ImWchar *ImFontAtlas_GetGlyphRangesThai(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) ImTextureID ImFontAtlas_GetTexID(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) unsigned char *ImFontAtlas_GetTexPixelsAlpha8(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) unsigned int *ImFontAtlas_GetTexPixelsRGBA32(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) int ImFontAtlas_GetTexWidth(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) int ImFontAtlas_GetTexHeight(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) int ImFontAtlas_GetTexDesiredWidth(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) void ImFontAtlas_SetTexDesiredWidth(struct ImFontAtlas *atlas, int TexDesiredWidth_);
	extern __attribute__((dllexport)) int ImFontAtlas_GetTexGlyphPadding(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) void ImFontAtlas_SetTexGlyphPadding(struct ImFontAtlas *atlas, int TexGlyphPadding_);
	extern __attribute__((dllexport)) void ImFontAtlas_GetTexUvWhitePixel(struct ImFontAtlas *atlas, struct ImVec2 *pOut);
	extern __attribute__((dllexport)) int ImFontAtlas_Fonts_size(struct ImFontAtlas *atlas);
	extern __attribute__((dllexport)) struct ImFont *ImFontAtlas_Fonts_index(struct ImFontAtlas *atlas, int index);
	extern __attribute__((dllexport)) float ImFont_GetFontSize(const struct ImFont *font);
	extern __attribute__((dllexport)) void ImFont_SetFontSize(struct ImFont *font, float FontSize_);
	extern __attribute__((dllexport)) float ImFont_GetScale(const struct ImFont *font);
	extern __attribute__((dllexport)) void ImFont_SetScale(struct ImFont *font, float Scale_);
	extern __attribute__((dllexport)) void ImFont_GetDisplayOffset(const struct ImFont *font, struct ImVec2 *pOut);
	extern __attribute__((dllexport)) const struct Glyph *ImFont_GetFallbackGlyph(const struct ImFont *font);
	extern __attribute__((dllexport)) void ImFont_SetFallbackGlyph(struct ImFont *font, const struct Glyph *FallbackGlyph_);
	extern __attribute__((dllexport)) float ImFont_GetFallbackAdvanceX(const struct ImFont *font);
	extern __attribute__((dllexport)) ImWchar ImFont_GetFallbackChar(const struct ImFont *font);
	extern __attribute__((dllexport)) short ImFont_GetConfigDataCount(const struct ImFont *font);
	extern __attribute__((dllexport)) struct ImFontConfig *ImFont_GetConfigData(struct ImFont *font);
	extern __attribute__((dllexport)) struct ImFontAtlas *ImFont_GetContainerAtlas(struct ImFont *font);
	extern __attribute__((dllexport)) float ImFont_GetAscent(const struct ImFont *font);
	extern __attribute__((dllexport)) float ImFont_GetDescent(const struct ImFont *font);
	extern __attribute__((dllexport)) int ImFont_GetMetricsTotalSurface(const struct ImFont *font);
	extern __attribute__((dllexport)) void ImFont_ClearOutputData(struct ImFont *font);
	extern __attribute__((dllexport)) void ImFont_BuildLookupTable(struct ImFont *font);
	extern __attribute__((dllexport)) const struct Glyph *ImFont_FindGlyph(const struct ImFont *font, ImWchar c);
	extern __attribute__((dllexport)) void ImFont_SetFallbackChar(struct ImFont *font, ImWchar c);
	extern __attribute__((dllexport)) float ImFont_GetCharAdvance(const struct ImFont *font, ImWchar c);
	extern __attribute__((dllexport)) _Bool ImFont_IsLoaded(const struct ImFont *font);
	extern __attribute__((dllexport)) const char *ImFont_GetDebugName(const struct ImFont *font);
	extern __attribute__((dllexport)) void ImFont_CalcTextSizeA(const struct ImFont *font, struct ImVec2 *pOut, float size, float max_width, float wrap_width, const char *text_begin, const char *text_end, const char **remaining);
	extern __attribute__((dllexport)) const char *ImFont_CalcWordWrapPositionA(const struct ImFont *font, float scale, const char *text, const char *text_end, float wrap_width);
	extern __attribute__((dllexport)) void ImFont_RenderChar(const struct ImFont *font, struct ImDrawList *draw_list, float size, struct ImVec2 pos, ImU32 col, unsigned short c);
	extern __attribute__((dllexport)) void ImFont_RenderText(const struct ImFont *font, struct ImDrawList *draw_list, float size, struct ImVec2 pos, ImU32 col, const struct ImVec4 *clip_rect, const char *text_begin, const char *text_end, float wrap_width, _Bool cpu_fine_clip);
	extern __attribute__((dllexport)) int ImFont_Glyphs_size(const struct ImFont *font);
	extern __attribute__((dllexport)) struct Glyph *ImFont_Glyphs_index(struct ImFont *font, int index);
	extern __attribute__((dllexport)) int ImFont_IndexXAdvance_size(const struct ImFont *font);
	extern __attribute__((dllexport)) float ImFont_IndexXAdvance_index(const struct ImFont *font, int index);
	extern __attribute__((dllexport)) int ImFont_IndexLookup_size(const struct ImFont *font);
	extern __attribute__((dllexport)) unsigned short ImFont_IndexLookup_index(const struct ImFont *font, int index);
	]]
--[[ END AUTOGENERATED SEGMENT ]]
local ffi = require"ffi"

--uncomment to debug cdef calls
---[[
local ffi_cdef = ffi.cdef
ffi.cdef = function(code)
	local ret,err = pcall(ffi_cdef,code)
	if not ret then
		
		local lineN = 1
		for line in code:gmatch("([^\n\r]*)\r?\n") do
			print(lineN, line)
			lineN = lineN + 1
		end
		print(err)
		error"bad cdef"
	end
end
--]]

assert(cdecl, "imgui.lua not properly build")
ffi.cdef(cdecl)

-- local file = io.open([[c:/luagl/lua/cimgui.txt]],"r")
-- local strfile = file:read"*a"
-- file:close()
-- ffi.cdef(strfile)

-- fonts ---------------------
ffi.cdef[[
typedef struct ImVec2 ImVec2;

struct ImVector
{
	int Size;
	int Capacity;
	void* Data;
};
typedef struct ImVector ImVector;

struct Glyph
{
    ImWchar         Codepoint;          // 0x0000..0xFFFF
    float           AdvanceX;           // Distance to next character (= data from font + ImFontConfig::GlyphExtraSpacing.x baked in)
    float           X0, Y0, X1, Y1;     // Glyph corners
    float           U0, V0, U1, V1;     // Texture coordinates
};
typedef struct Glyph ImFontGlyph;

struct ImFontAtlas 
{
//ImTextureID                 TexID;              // User data to refer to the texture once it has been uploaded to user's graphic systems. It is passed back to you during rendering via the ImDrawCmd structure.
	void* TexID;
    int                         TexDesiredWidth;    // Texture width desired by user before Build(). Must be a power-of-two. If have many glyphs your graphics API have texture size restrictions you may want to increase texture width to decrease height.
    int                         TexGlyphPadding;    // Padding between glyphs within texture in pixels. Defaults to 1.

    // [Internal]
    // NB: Access texture data via GetTexData*() calls! Which will setup a default font for you.
    unsigned char*              TexPixelsAlpha8;    // 1 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight
    unsigned int*               TexPixelsRGBA32;    // 4 component per pixel, each component is unsigned 8-bit. Total size = TexWidth * TexHeight * 4
    int                         TexWidth;           // Texture width calculated during Build().
    int                         TexHeight;          // Texture height calculated during Build().
	ImVec2                      TexUvWhitePixel;    // Texture coordinates to a white pixel
    ImVector/*<ImFont*> */          Fonts;              // Hold all the fonts returned by AddFont*. Fonts[0] is the default font upon calling ImGui::NewFrame(), use ImGui::PushFont()/PopFont() to change the current font.
	ImVector/*<CustomRect> */       CustomRects;        // Rectangles for packing custom texture data into the atlas.
	ImVector/*<ImFontConfig>*/      ConfigData;         // Internal data
    int                         CustomRectIds[1];   // Identifiers of custom texture rectangle used by ImFontAtlas/ImDrawList
	
};
typedef struct ImFontAtlas ImFontAtlas;

typedef struct ImGuiContext ImGuiContext;
typedef struct ImFontConfig ImFontConfig;

struct ImFont
{
    // Members: Hot ~62/78 bytes
    float                       FontSize;           // <user set>   // Height of characters, set during loading (don't change after loading)
    float                       Scale;              // = 1.f        // Base font scale, multiplied by the per-window font scale which you can adjust with SetFontScale()
    ImVec2                      DisplayOffset;      // = (0.f,1.f)  // Offset font rendering by xx pixels
    ImVector/*<ImFontGlyph>*/       Glyphs;             //              // All glyphs.
    ImVector/*<float>*/             IndexAdvanceX;      //              // Sparse. Glyphs->AdvanceX in a directly indexable way (more cache-friendly, for CalcTextSize functions which are often bottleneck in large UI).
    ImVector/*<unsigned short>*/    IndexLookup;        //              // Sparse. Index glyphs by Unicode code-point.
    const ImFontGlyph*          FallbackGlyph;      // == FindGlyph(FontFallbackChar)
    float                       FallbackAdvanceX;   // == FallbackGlyph->AdvanceX
    ImWchar                     FallbackChar;       // = '?'        // Replacement glyph if one isn't found. Only set via SetFallbackChar()

    // Members: Cold ~18/26 bytes
    short                       ConfigDataCount;    // ~ 1          // Number of ImFontConfig involved in creating this font. Bigger than 1 when merging multiple font sources into one ImFont.
    struct ImFontConfig*               ConfigData;         //              // Pointer within ContainerAtlas->ConfigData
    struct ImFontAtlas*                ContainerAtlas;     //              // What we has been loaded into
    float                       Ascent, Descent;    //              // Ascent: distance from top to bottom of e.g. 'A' [0..FontSize]
    int                         MetricsTotalSurface;//              // Total surface in pixels to get an idea of the font rasterization/texture cost (not exact, we approximate the cost of padding between glyphs)

};
typedef struct ImFont ImFont;

typedef struct ImDrawList ImDrawList;	
]]

-- glfw3 implementation and extras
ffi.cdef[[
float igGET_FLT_MAX();

//////////////// glfw3 gl3 Implementation
int Do_gl3wInit(void);
typedef struct GLFWwindow GLFWwindow;
typedef struct {
	// Data
	GLFWwindow*  g_Window ;
	struct ImGuiContext* ctx;
	double       g_Time ;
	bool         g_MousePressed[3] ;
	float        g_MouseWheel;
	unsigned int g_FontTexture;
	int          g_ShaderHandle, g_VertHandle, g_FragHandle;
	int          g_AttribLocationTex, g_AttribLocationProjMtx;
	int          g_AttribLocationPosition, g_AttribLocationUV, g_AttribLocationColor;
	unsigned int g_VboHandle, g_VaoHandle, g_ElementsHandle;
}ImGui_ImplGlfwGL3;

ImGui_ImplGlfwGL3* ImGui_ImplGlfwGL3_new();
void ImGui_ImplGlfwGL3_delete(ImGui_ImplGlfwGL3*);
bool        ImGui_ImplGlfwGL3_Init(ImGui_ImplGlfwGL3*,GLFWwindow* window, bool install_callbacks);
void        ImGui_ImplGlfwGL3_NewFrame(ImGui_ImplGlfwGL3*);
void        ImGui_ImplGlfwGL3_Render(ImGui_ImplGlfwGL3* impl);
// Use if you want to reset your rendering device without losing ImGui state.
void        ImGui_ImplGlfwGL3_InvalidateDeviceObjects(ImGui_ImplGlfwGL3*);
void 		ImGui_ImplGlfwGL3_Set(ImGui_ImplGlfwGL3*);
// bool        ImGui_ImplGlfwGL3_CreateDeviceObjects();

// GLFW callbacks (installed by default if you enable 'install_callbacks' during initialization)
// Provided here if you want to chain callbacks.
// You can also handle inputs yourself and use those as a reference.
 void        ImGui_ImplGlfwGL3_MouseButtonCallback(GLFWwindow* window, int button, int action, int mods);
 void        ImGui_ImplGlfwGL3_ScrollCallback(GLFWwindow* window, double xoffset, double yoffset);
 void        ImGui_ImplGlfwGL3_KeyCallback(GLFWwindow* window, int key, int scancode, int action, int mods);
 void        ImGui_ImplGlfwGL3_CharCallback(GLFWwindow* window, unsigned int c);
 
//addons
bool Knob(const char* label, float* value_p, float minv, float maxv);
int Bezier( const char *label, float P[4] );
bool Curve(const char *label, const struct ImVec2& size, struct ImVec2 *points, const int maxpoints, float *data, int datalen);
void CurveGetData(struct ImVec2 *points, const int maxpoints, float *data, int datalen);
 								

//experiments
struct ImVec2 igGetCursorScreenPosORIG();
struct ImVec2 igGetCursorScreenPosORIG2();

//ImVec2 GetCursorScreenPos();
]]

ffi.cdef[[
//Log
typedef struct Log Log;
Log* Log_new();
void Log_Add(Log* log,const char* fmt, ...);
void Log_Draw(Log* log, const char* title); //, bool* p_open = NULL
void Log_delete(Log* log);	

]]



if jit.os == "Windows" then
ffi.cdef[[
 
// Helpers: UTF-8 <> wchar
int           igImTextStrToUtf8(char* buf, int buf_size, const ImWchar* in_text, const ImWchar* in_text_end);      // return output UTF-8 bytes count 
int           igImTextCharFromUtf8(unsigned int* out_char, const char* in_text, const char* in_text_end);          // return input UTF-8 bytes count 
int           igImTextStrFromUtf8(ImWchar* buf, int buf_size, const char* in_text, const char* in_text_end, const char** in_remaining);   // return input UTF-8 bytes count 
int           igImTextCountCharsFromUtf8(const char* in_text, const char* in_text_end);                            // return number of UTF-8 code-points (NOT bytes count) 
int           igImTextCountUtf8BytesFromStr(const ImWchar* in_text, const ImWchar* in_text_end);                   // return number of bytes to express string as UTF-8 code-points 
 
]]
end

--local lib = ffi.load[[C:\luaGL\gitsources\cimgui\buildcimgui2\libcimgui]]
--local lib = ffi.load[[C:\luaGL\gitsources\build_cimgui3\libcimgui]]
--lib = ffi.load[[C:\luaGL\gitsources\cimgui\builddebug\libcimguiMT]]
local lib = ffi.load[[libcimgui]]

local ImVec2 
ImVec2 = ffi.metatype("ImVec2",{
	__add = function(a,b) return ImVec2(a.x + b.x, a.y + b.y) end,
	__sub = function(a,b) return ImVec2(a.x - b.x, a.y - b.y) end,
	__unm = function(a) return ImVec2(-a.x,-a.y) end,
	__mul = function(a, b) --scalar mult
		if not ffi.istype(ImVec2, b) then
		return ImVec2(a.x * b, a.y * b) end
		return ImVec2(a * b.x, a * b.y)
	end,
	__tostring = function(v) return 'ImVec2<'..v.x..','..v.y..'>' end
})
sss = ImVec2(3,2)
local ImVec2_p = ffi.typeof("ImVec2[1]")
local ImVec4 = ffi.typeof("struct ImVec4")


-- hand written functions

local M = {ImVec2 = ImVec2, ImVec4 = ImVec4, lib = lib}
function M.Begin(name, p_open, flags)
	 return  lib.igBegin(name, p_open or nil,flags or 0);
end
function M.End()
	 return  lib.igEnd();
end
function M.Button(label, size)
	return lib.igButton(label, size or ImVec2(0, 0))
end

function M.CollapsingHeader(label,flags)
	return lib.igCollapsingHeader(label,flags or 0)
end

function M.GetCursorScreenPos()
	local pos = ImVec2_p()
	lib.igGetCursorScreenPos(pos)
	return pos[0]
end
function M.CalcItemRectClosestPoint(pos, on_edge, outward)
	if on_edge == nil then on_edge = false end
	local ret = ImVec2_p()
	lib.igCalcItemRectClosestPoint(ret, pos, on_edge, outward or 0);
	return ret[0]
end
function M.CalcTextSize(text, text_end, hide_text_after_double_hash, wrap_width)
	if hide_text_after_double_hash == nil then hide_text_after_double_hash = false end
	local ret = ImVec2_p()
	lib.igCalcTextSize(ret, text, text_end, hide_text_after_double_hash, wrap_width or -1)
	return ret[0]
end
function M.GetMouseDragDelta(button , lock_threshold)
	local pos = ImVec2_p()
	lib.igGetMouseDragDelta(pos, button or 0, lock_threshold or -1)
	return pos[0]
end
function M.SameLine(pos_x, spacing_w)
	return lib.igSameLine(pos_x or 0.0, spacing_w or -1.0)
end
function M.SliderInt(label,v, v_min, v_max, display_format)
	return lib.igSliderInt(label,v, v_min, v_max, display_format or "%.0f")
end
function M.PlotLines(label, values, values_count, values_offset, overlay_text, scale_min, scale_max, graph_size, stride)
	lib.igPlotLines(label, values, values_count, values_offset or 0, overlay_text, scale_min or M.FLT_MAX, scale_max or M.FLT_MAX, graph_size or ImVec2(0,0), stride or ffi.sizeof"float")
end
function M.GetContentRegionAvail()
	local avail = ImVec2(0,0)
	lib.igGetContentRegionAvail(avail)
	return avail
end

function M.SetNextWindowPos(pos,cond,pivot)
	return lib.igSetNextWindowPos(pos, cond or 0, pivot or ImVec2(0,0));
end

function M.IsItemHovered(flags)
	return lib.igIsItemHovered(flags or 0)
end
if jit.os == "Windows" then
	function M.ToUTF(unc_str)
		local buf_len = lib.igImTextCountUtf8BytesFromStr(unc_str, nil) + 1;
		local buf_local = ffi.new("char[?]",buf_len)
		lib.igImTextStrToUtf8(buf_local, buf_len, unc_str, nil);
		return buf_local
	end
	
	function M.FromUTF(utf_str)
		local wbuf_length = lib.igImTextCountCharsFromUtf8(utf_str, nil) + 1;
		local buf_local = ffi.new("ImWchar[?]",wbuf_length)
		lib.igImTextStrFromUtf8(buf_local, wbuf_length, utf_str, nil,nil);
		return buf_local
	end
end

M.FLT_MAX = lib.igGET_FLT_MAX()

----------- ImFontAtlas
local ImFontAtlas = {}
ImFontAtlas.__index = ImFontAtlas

function ImFontAtlas:AddFontDefault(font_cfg)
	return lib.ImFontAtlas_AddFontDefault(self, font_cfg)
end

function ImFontAtlas:AddFontFromFileTTF(filename, size_pixels, font_cfg, glyph_ranges)
	return lib.ImFontAtlas_AddFontFromFileTTF(self, filename, size_pixels, font_cfg, glyph_ranges);
end

function ImFontAtlas:GetTexDataAsRGBA32(out_pixels, out_width, out_height, out_bytes_per_pixel)
	lib.ImFontAtlas_GetTexDataAsRGBA32(self,out_pixels, out_width, out_height, out_bytes_per_pixel);
end

ffi.metatype("ImFontAtlas", ImFontAtlas)
------------ImFont
local ImFont = {}
ImFont.__index = ImFont

function ImFont:FindGlyph(codepoint)
	return lib.ImFont_FindGlyph(self, codepoint)
end

ffi.metatype("ImFont",ImFont)
----------ImFontConfig
local ImFontConfig = {}
ImFontConfig.__index = ImFontConfig
ImFontConfig.__new = function(tp)
	local ret = ffi.new(tp)
	
	--FontData = NULL;
    --FontDataSize = 0;
    ret.FontDataOwnedByAtlas = true;
    --FontNo = 0;
    --SizePixels = 0.0f;
    ret.OversampleH = 3;
    ret.OversampleV = 1;
    ret.PixelSnapH = false;
    ret.GlyphExtraSpacing = ImVec2(0.0, 0.0);
    ret.GlyphOffset = ImVec2(0.0, 0.0);
    --GlyphRanges = NULL;
    ret.MergeMode = false;
    --RasterizerFlags = 0x00;
    ret.RasterizerMultiply = 1.0;
    --memset(Name, 0, sizeof(Name));
    --DstFont = NULL;
	return ret
end
M.ImFontConfig = ffi.metatype("ImFontConfig",ImFontConfig)
-----------ImDrawList
local ImDrawList = {}
ImDrawList.__index = ImDrawList

function ImDrawList:AddLine(a, b, col,thickness)
	lib.ImDrawList_AddLine(self, a, b, col, thickness or 1)
end
function ImDrawList:AddRect(a,b,col,rounding,rounding_corners,thickness)
 return lib.ImDrawList_AddRect(self, a, b, col, rounding or 0, rounding_corners or 0, thickness or 1)
end

function ImDrawList:AddText(pos, col, text_begin, text_end)
	lib.ImDrawList_AddText(self, pos, col, text_begin, text_end)
end

function ImDrawList:AddCircleFilled(centre, radius, col, num_segments)
	lib.ImDrawList_AddCircleFilled(self, centre, radius, col, num_segments or 12)
end

function M.U32(a,b,c,d) return lib.igGetColorU32Vec(ImVec4(a,b,c,d or 1)) end

ffi.metatype("ImDrawList",ImDrawList)

-----------ImGui_ImplGlfwGL3
local ImGui_ImplGlfwGL3 = {}
ImGui_ImplGlfwGL3.__index = ImGui_ImplGlfwGL3

local gl3w_inited = false
function ImGui_ImplGlfwGL3.__new()
	if gl3w_inited == false then
		lib.Do_gl3wInit()
		gl3w_inited = true
	end
	local ptr = lib.ImGui_ImplGlfwGL3_new()
	ffi.gc(ptr,lib.ImGui_ImplGlfwGL3_delete)
	return ptr
end

function ImGui_ImplGlfwGL3:destroy()
	ffi.gc(self,nil) --prevent gc twice
	lib.ImGui_ImplGlfwGL3_delete(self)
end

function ImGui_ImplGlfwGL3:NewFrame()
	return lib.ImGui_ImplGlfwGL3_NewFrame(self)
end

function ImGui_ImplGlfwGL3:Render()
	return lib.ImGui_ImplGlfwGL3_Render(self)
end

function ImGui_ImplGlfwGL3:Init(window, install_callbacks)
	return lib.ImGui_ImplGlfwGL3_Init(self, window,install_callbacks);
end

M.ImplGlfwGL3 = ffi.metatype("ImGui_ImplGlfwGL3",ImGui_ImplGlfwGL3)
---------------------------------
local Log = {}
Log.__index = Log
function Log.__new()
	local ptr = lib.Log_new()
	ffi.gc(ptr,lib.Log_delete)
	return ptr
end
function Log:Add(fmt,...)
	lib.Log_Add(self,fmt,...)
end
function Log:Draw(title)
	title = title or "Log"
	lib.Log_Draw(self,title)
end
M.Log = ffi.metatype("Log",Log)
--------obsoletes
function M.GetItemsLineHeightWithSpacing() 
	return lib.igGetFrameHeightWithSpacing()
end
function M.PushIdStr(id) 
	return lib.igPushIDStr(id)
end
function M.PopId() 
	return lib.igPopID()
end
function M.ShowTestWindow(a)
	return lib.igShowDemoWindow(a)
end
----------- get ig.. functions without prefix
M = setmetatable(M,{
	__index = function(t,k) 
		local ok, obj = pcall(function(val) return lib[val] end, "ig"..k)
		if not ok then error("Couldn't find function "..k.." (are you accessing the right function?)",2) end
		rawset(M, k, obj)
		return obj
	end
})


return M