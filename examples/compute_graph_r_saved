local ffi = require"ffi"
local ig = require"imgui.glfw"
        local node1 = {}
node1["values"] = {}
node1["values"][1] = ffi.new("float[?]",1,0)
node1["values"][2] = ffi.new("float[?]",1,0)
node1["values"][3] = ffi.new("float[?]",1,0)
node1["id"] = ffi.cast('void*',1)
node1["show"] = nil
node1["compute"] = nil
node1["delete"] = nil
node1["delete_connection"] = nil
node1["save_str"] = nil
node1["pos"] = ig.ImVec2(539,115)
node1["selected"] = ffi.new('bool[1]',false)
node1["title"] = "output"
node1["is_root"] = true
node1["nins"] = 3
node1["nouts"] = 0
node1["draw"] = nil
node1["input_slots"] = ffi.new("SlotInfo[?]",3,{{'r',1},{'g',1},{'b',1},})
node1["outputs"] = {}
node1["output_slots"] = ffi.new("SlotInfo[?]",0,{})
node1["connections"] = {}
node1["connections"][1] = {}
node1["connections"][1]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',1))
node1["connections"][1]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',6))
node1["connections"][1]["output_slot"] = ffi.new('const char*[1]',{'out'})
node1["connections"][1]["input_slot"] = ffi.new('const char*[1]',{'r'})
node1["inputs"] = {}
node1["inputs"][1] = "in1r"
node1["inputs"][2] = "in1g"
node1["inputs"][3] = "in1b"

local node2 = {}
node2["values"] = {}
node2["id"] = ffi.cast('void*',2)
node2["compute"] = nil
node2["delete"] = nil
node2["delete_connection"] = nil
node2["save_str"] = nil
node2["pos"] = ig.ImVec2(23,105)
node2["selected"] = ffi.new('bool[1]',false)
node2["title"] = "time"
node2["nins"] = 0
node2["nouts"] = 1
node2["draw"] = nil
node2["input_slots"] = ffi.new("SlotInfo[?]",0,{})
node2["outputs"] = {}
node2["outputs"][1] = "out2time"
node2["output_slots"] = ffi.new("SlotInfo[?]",1,{{'time',1},})
node2["connections"] = {}
node2["connections"][1] = {}
node2["connections"][1]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',3))
node2["connections"][1]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',2))
node2["connections"][1]["output_slot"] = ffi.new('const char*[1]',{'time'})
node2["connections"][1]["input_slot"] = ffi.new('const char*[1]',{'lhs'})
node2["connections"][2] = {}
node2["connections"][2]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',9))
node2["connections"][2]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',2))
node2["connections"][2]["output_slot"] = ffi.new('const char*[1]',{'time'})
node2["connections"][2]["input_slot"] = ffi.new('const char*[1]',{'rhs'})
node2["inputs"] = {}

local node3 = {}
node3["values"] = {}
node3["values"][1] = ffi.new("float[?]",1,0)
node3["values"][2] = ffi.new("float[?]",1,6.3699998855591)
node3["id"] = ffi.cast('void*',3)
node3["compute"] = nil
node3["delete"] = nil
node3["delete_connection"] = nil
node3["save_str"] = nil
node3["pos"] = ig.ImVec2(26,220)
node3["selected"] = ffi.new('bool[1]',false)
node3["title"] = "multiply"
node3["nins"] = 2
node3["nouts"] = 1
node3["draw"] = nil
node3["input_slots"] = ffi.new("SlotInfo[?]",2,{{'lhs',1},{'rhs',1},})
node3["outputs"] = {}
node3["outputs"][1] = "out3mul"
node3["output_slots"] = ffi.new("SlotInfo[?]",1,{{'mul',1},})
node3["connections"] = {}
node3["connections"][1] = {}
node3["connections"][1]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',3))
node3["connections"][1]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',2))
node3["connections"][1]["output_slot"] = ffi.new('const char*[1]',{'time'})
node3["connections"][1]["input_slot"] = ffi.new('const char*[1]',{'lhs'})
node3["connections"][2] = {}
node3["connections"][2]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',4))
node3["connections"][2]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',3))
node3["connections"][2]["output_slot"] = ffi.new('const char*[1]',{'mul'})
node3["connections"][2]["input_slot"] = ffi.new('const char*[1]',{'lhs'})
node3["connections"][3] = {}
node3["connections"][3]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',5))
node3["connections"][3]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',3))
node3["connections"][3]["output_slot"] = ffi.new('const char*[1]',{'mul'})
node3["connections"][3]["input_slot"] = ffi.new('const char*[1]',{'lhs'})
node3["inputs"] = {}
node3["inputs"][1] = "in3lhs"
node3["inputs"][2] = "in3rhs"

local node4 = {}
node4["values"] = {}
node4["values"][1] = ffi.new("float[?]",1,0)
node4["values"][2] = ffi.new("float[?]",1,1)
node4["id"] = ffi.cast('void*',4)
node4["compute"] = nil
node4["delete"] = nil
node4["delete_connection"] = nil
node4["save_str"] = nil
node4["pos"] = ig.ImVec2(169,84)
node4["selected"] = ffi.new('bool[1]',false)
node4["title"] = "multiply"
node4["nins"] = 2
node4["nouts"] = 1
node4["draw"] = nil
node4["input_slots"] = ffi.new("SlotInfo[?]",2,{{'lhs',1},{'rhs',1},})
node4["outputs"] = {}
node4["outputs"][1] = "out4mul"
node4["output_slots"] = ffi.new("SlotInfo[?]",1,{{'mul',1},})
node4["connections"] = {}
node4["connections"][1] = {}
node4["connections"][1]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',4))
node4["connections"][1]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',3))
node4["connections"][1]["output_slot"] = ffi.new('const char*[1]',{'mul'})
node4["connections"][1]["input_slot"] = ffi.new('const char*[1]',{'lhs'})
node4["connections"][2] = {}
node4["connections"][2]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',9))
node4["connections"][2]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',4))
node4["connections"][2]["output_slot"] = ffi.new('const char*[1]',{'mul'})
node4["connections"][2]["input_slot"] = ffi.new('const char*[1]',{'lhs'})
node4["inputs"] = {}
node4["inputs"][1] = "in4lhs"
node4["inputs"][2] = "in4rhs"

local node5 = {}
node5["values"] = {}
node5["values"][1] = ffi.new("float[?]",1,0)
node5["values"][2] = ffi.new("float[?]",1,2)
node5["id"] = ffi.cast('void*',5)
node5["compute"] = nil
node5["delete"] = nil
node5["delete_connection"] = nil
node5["save_str"] = nil
node5["pos"] = ig.ImVec2(241,332)
node5["selected"] = ffi.new('bool[1]',false)
node5["title"] = "multiply"
node5["nins"] = 2
node5["nouts"] = 1
node5["draw"] = nil
node5["input_slots"] = ffi.new("SlotInfo[?]",2,{{'lhs',1},{'rhs',1},})
node5["outputs"] = {}
node5["outputs"][1] = "out5mul"
node5["output_slots"] = ffi.new("SlotInfo[?]",1,{{'mul',1},})
node5["connections"] = {}
node5["connections"][1] = {}
node5["connections"][1]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',5))
node5["connections"][1]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',3))
node5["connections"][1]["output_slot"] = ffi.new('const char*[1]',{'mul'})
node5["connections"][1]["input_slot"] = ffi.new('const char*[1]',{'lhs'})
node5["connections"][2] = {}
node5["connections"][2]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',7))
node5["connections"][2]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',5))
node5["connections"][2]["output_slot"] = ffi.new('const char*[1]',{'mul'})
node5["connections"][2]["input_slot"] = ffi.new('const char*[1]',{'in'})
node5["inputs"] = {}
node5["inputs"][1] = "in5lhs"
node5["inputs"][2] = "in5rhs"

local node6 = {}
node6["values"] = {}
node6["values"][1] = ffi.new("float[?]",1,0)
node6["id"] = ffi.cast('void*',6)
node6["compute"] = nil
node6["delete"] = nil
node6["delete_connection"] = nil
node6["save_str"] = nil
node6["pos"] = ig.ImVec2(447,60)
node6["selected"] = ffi.new('bool[1]',false)
node6["title"] = "sine"
node6["nins"] = 1
node6["nouts"] = 1
node6["draw"] = nil
node6["input_slots"] = ffi.new("SlotInfo[?]",1,{{'in',1},})
node6["outputs"] = {}
node6["outputs"][1] = "out6out"
node6["output_slots"] = ffi.new("SlotInfo[?]",1,{{'out',1},})
node6["connections"] = {}
node6["connections"][1] = {}
node6["connections"][1]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',1))
node6["connections"][1]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',6))
node6["connections"][1]["output_slot"] = ffi.new('const char*[1]',{'out'})
node6["connections"][1]["input_slot"] = ffi.new('const char*[1]',{'r'})
node6["connections"][2] = {}
node6["connections"][2]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',8))
node6["connections"][2]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',6))
node6["connections"][2]["output_slot"] = ffi.new('const char*[1]',{'out'})
node6["connections"][2]["input_slot"] = ffi.new('const char*[1]',{'x'})
node6["connections"][3] = {}
node6["connections"][3]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',6))
node6["connections"][3]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',9))
node6["connections"][3]["output_slot"] = ffi.new('const char*[1]',{'sum'})
node6["connections"][3]["input_slot"] = ffi.new('const char*[1]',{'in'})
node6["inputs"] = {}
node6["inputs"][1] = "in6in"

local node7 = {}
node7["values"] = {}
node7["values"][1] = ffi.new("float[?]",1,0)
node7["id"] = ffi.cast('void*',7)
node7["compute"] = nil
node7["delete"] = nil
node7["delete_connection"] = nil
node7["save_str"] = nil
node7["pos"] = ig.ImVec2(462,215)
node7["selected"] = ffi.new('bool[1]',false)
node7["title"] = "sine"
node7["nins"] = 1
node7["nouts"] = 1
node7["draw"] = nil
node7["input_slots"] = ffi.new("SlotInfo[?]",1,{{'in',1},})
node7["outputs"] = {}
node7["outputs"][1] = "out7out"
node7["output_slots"] = ffi.new("SlotInfo[?]",1,{{'out',1},})
node7["connections"] = {}
node7["connections"][1] = {}
node7["connections"][1]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',7))
node7["connections"][1]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',5))
node7["connections"][1]["output_slot"] = ffi.new('const char*[1]',{'mul'})
node7["connections"][1]["input_slot"] = ffi.new('const char*[1]',{'in'})
node7["connections"][2] = {}
node7["connections"][2]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',8))
node7["connections"][2]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',7))
node7["connections"][2]["output_slot"] = ffi.new('const char*[1]',{'out'})
node7["connections"][2]["input_slot"] = ffi.new('const char*[1]',{'y'})
node7["inputs"] = {}
node7["inputs"][1] = "in7in"

local node8 = {}
node8["outputs"] = {}
node8["id"] = ffi.cast('void*',8)
node8["show"] = nil
node8["compute"] = nil
node8["delete"] = nil
node8["delete_connection"] = nil
node8["save_str"] = nil
node8["pos"] = ig.ImVec2(570,316)
node8["selected"] = ffi.new('bool[1]',false)
node8["lisamem"] = {}
node8["lisamem"][1] = {}
node8["lisamem"][1][1] = 0.12428794370869706
node8["lisamem"][1][2] = 0.01209906441215669
node8["lisamem"][2] = {}
node8["lisamem"][2][1] = 0.0066943735017529482
node8["lisamem"][2][2] = 0.37028405920417745
node8["lisamem"][3] = {}
node8["lisamem"][3][1] = 0.0066943735017529482
node8["lisamem"][3][2] = 0.37028405920417745
node8["lisamem"][4] = {}
node8["lisamem"][4][1] = 0.014037923315915024
node8["lisamem"][4][2] = 0.43268804920899795
node8["lisamem"][5] = {}
node8["lisamem"][5][1] = 0.024019873828144411
node8["lisamem"][5][2] = 0.4961830863842725
node8["lisamem"][6] = {}
node8["lisamem"][6][1] = 0.036586030716562301
node8["lisamem"][6][2] = 0.55973999121822537
node8["lisamem"][7] = {}
node8["lisamem"][7][1] = 0.036586030716562301
node8["lisamem"][7][2] = 0.55973999121822537
node8["lisamem"][8] = {}
node8["lisamem"][8][1] = 0.051668169404228248
node8["lisamem"][8][2] = 0.62232858139762093
node8["lisamem"][9] = {}
node8["lisamem"][9][1] = 0.069184405466067467
node8["lisamem"][9][2] = 0.68293436984521194
node8["lisamem"][10] = {}
node8["lisamem"][10][1] = 0.089039639198475296
node8["lisamem"][10][2] = 0.74057500835647894
node8["lisamem"][11] = {}
node8["lisamem"][11][1] = 0.11112607193764978
node8["lisamem"][11][2] = 0.7943162103031941
node8["lisamem"][12] = {}
node8["lisamem"][12][1] = 0.11112607193764978
node8["lisamem"][12][2] = 0.7943162103031941
node8["lisamem"][13] = {}
node8["lisamem"][13][1] = 0.13532379132342998
node8["lisamem"][13][2] = 0.84328689431518011
node8["lisamem"][14] = {}
node8["lisamem"][14][1] = 0.16150142233131837
node8["lisamem"][14][2] = 0.88669330348001596
node8["lisamem"][15] = {}
node8["lisamem"][15][1] = 0.18951684053799239
node8["lisamem"][15][2] = 0.92383187120459098
node8["lisamem"][16] = {}
node8["lisamem"][16][1] = 0.21921794374758041
node8["lisamem"][16][2] = 0.95410062519782091
node8["lisamem"][17] = {}
node8["lisamem"][17][1] = 0.21921794374758041
node8["lisamem"][17][2] = 0.95410062519782091
node8["lisamem"][18] = {}
node8["lisamem"][18][1] = 0.25044347778991749
node8["lisamem"][18][2] = 0.9770089447303143
node8["lisamem"][19] = {}
node8["lisamem"][19][1] = 0.28302391200653909
node8["lisamem"][19][2] = 0.9921855130163576
node8["lisamem"][20] = {}
node8["lisamem"][20][1] = 0.31678235967210955
node8["lisamem"][20][2] = 0.99938433582028696
node8["lisamem"][21] = {}
node8["lisamem"][21][1] = 0.35153553835342155
node8["lisamem"][21][2] = 0.99848872873231076
node8["lisamem"][22] = {}
node8["lisamem"][22][1] = 0.35153553835342155
node8["lisamem"][22][2] = 0.99848872873231076
node8["lisamem"][23] = {}
node8["lisamem"][23][1] = 0.38709476499208195
node8["lisamem"][23][2] = 0.98951320848485214
node8["lisamem"][24] = {}
node8["lisamem"][24][1] = 0.42326698030851356
node8["lisamem"][24][2] = 0.97260325765352373
node8["lisamem"][25] = {}
node8["lisamem"][25][1] = 0.45985579696576107
node8["lisamem"][25][2] = 0.94803296655643687
node8["lisamem"][26] = {}
node8["lisamem"][26][1] = 0.49666256580156459
node8["lisamem"][26][2] = 0.91620059057416658
node8["lisamem"][27] = {}
node8["lisamem"][27][1] = 0.49666256580156459
node8["lisamem"][27][2] = 0.91620059057416658
node8["lisamem"][28] = {}
node8["lisamem"][28][1] = 0.5334874543407927
node8["lisamem"][28][2] = 0.87762209490068854
node8["lisamem"][29] = {}
node8["lisamem"][29][1] = 0.57013053173233152
node8["lisamem"][29][2] = 0.83292279135724256
node8["lisamem"][30] = {}
node8["lisamem"][30][1] = 0.60639285421979527
node8["lisamem"][30][2] = 0.78282720282697937
node8["is_root"] = true
node8["nins"] = 2
node8["draw"] = nil
node8["nouts"] = 0
node8["values"] = {}
node8["values"][1] = ffi.new("float[?]",1,0)
node8["values"][2] = ffi.new("float[?]",1,0)
node8["input_slots"] = ffi.new("SlotInfo[?]",2,{{'x',1},{'y',1},})
node8["title"] = "lisa"
node8["output_slots"] = ffi.new("SlotInfo[?]",0,{})
node8["connections"] = {}
node8["connections"][1] = {}
node8["connections"][1]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',8))
node8["connections"][1]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',6))
node8["connections"][1]["output_slot"] = ffi.new('const char*[1]',{'out'})
node8["connections"][1]["input_slot"] = ffi.new('const char*[1]',{'x'})
node8["connections"][2] = {}
node8["connections"][2]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',8))
node8["connections"][2]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',7))
node8["connections"][2]["output_slot"] = ffi.new('const char*[1]',{'out'})
node8["connections"][2]["input_slot"] = ffi.new('const char*[1]',{'y'})
node8["inputs"] = {}
node8["inputs"][1] = "in8x"
node8["inputs"][2] = "in8y"

local node9 = {}
node9["values"] = {}
node9["values"][1] = ffi.new("float[?]",1,0)
node9["values"][2] = ffi.new("float[?]",1,0.51999998092651)
node9["id"] = ffi.cast('void*',9)
node9["compute"] = nil
node9["delete"] = nil
node9["delete_connection"] = nil
node9["save_str"] = nil
node9["pos"] = ig.ImVec2(285,154)
node9["selected"] = ffi.new('bool[1]',true)
node9["title"] = "add"
node9["nins"] = 2
node9["nouts"] = 1
node9["draw"] = nil
node9["input_slots"] = ffi.new("SlotInfo[?]",2,{{'lhs',1},{'rhs',1},})
node9["outputs"] = {}
node9["outputs"][1] = "out9sum"
node9["output_slots"] = ffi.new("SlotInfo[?]",1,{{'sum',1},})
node9["connections"] = {}
node9["connections"][1] = {}
node9["connections"][1]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',9))
node9["connections"][1]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',4))
node9["connections"][1]["output_slot"] = ffi.new('const char*[1]',{'mul'})
node9["connections"][1]["input_slot"] = ffi.new('const char*[1]',{'lhs'})
node9["connections"][2] = {}
node9["connections"][2]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',6))
node9["connections"][2]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',9))
node9["connections"][2]["output_slot"] = ffi.new('const char*[1]',{'sum'})
node9["connections"][2]["input_slot"] = ffi.new('const char*[1]',{'in'})
node9["connections"][3] = {}
node9["connections"][3]["input_node"] = ffi.new('void*[1]',ffi.cast('void*',9))
node9["connections"][3]["output_node"] = ffi.new('void*[1]',ffi.cast('void*',2))
node9["connections"][3]["output_slot"] = ffi.new('const char*[1]',{'time'})
node9["connections"][3]["input_slot"] = ffi.new('const char*[1]',{'rhs'})
node9["inputs"] = {}
node9["inputs"][1] = "in9lhs"
node9["inputs"][2] = "in9rhs"

local root_nodes = {}
root_nodes[1] = 1
root_nodes[2] = 8
return {nodes = {[1]=node1,[2]=node2,[3]=node3,[4]=node4,[5]=node5,[6]=node6,[7]=node7,[8]=node8,[9]=node9,},name='compute_graph_r',current_id = 9,root_nodes = root_nodes}